nohup: ignoring input
2024-10-31 05:51:29.925042: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-10-31 05:51:30.198451: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-10-31 05:51:30.460648: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
2024-10-31 05:51:30.652772: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
2024-10-31 05:51:30.706153: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
2024-10-31 05:51:31.125629: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-10-31 05:51:32.961594: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
Detectron v2 is not installed
 
 -------------- celery@dap391-instance v5.4.0 (opalescent)
--- ***** ----- 
-- ******* ---- Linux-6.1.0-26-cloud-amd64-x86_64-with-glibc2.36 2024-10-31 05:51:38
- *** --- * --- 
- ** ---------- [config]
- ** ---------- .> app:         myapp:0x7f5aa7033550
- ** ---------- .> transport:   redis://localhost:6379/0
- ** ---------- .> results:     redis://localhost:6379/0
- *** --- * --- .> concurrency: 1 (prefork)
-- ******* ---- .> task events: OFF (enable -E to monitor tasks in this worker)
--- ***** ----- 
 -------------- [queues]
                .> celery           exchange=celery(direct) key=celery
                

[tasks]
  . celery_tasks.celery_fill_anything
  . celery_tasks.celery_remove_anything
  . celery_tasks.celery_replace_anything
  . celery_tasks.load_model

[2024-10-31 05:51:38,343: INFO/MainProcess] Connected to redis://localhost:6379/0
[2024-10-31 05:51:38,346: INFO/MainProcess] mingle: searching for neighbors
[2024-10-31 05:51:39,355: INFO/MainProcess] mingle: all alone
[2024-10-31 05:51:39,366: INFO/MainProcess] celery@dap391-instance ready.
[2024-10-31 05:52:47,481: INFO/MainProcess] Task celery_tasks.load_model[df2789ba-f459-42ec-aabb-e7ac283503e3] received
[2024-10-31 05:52:48,427: INFO/MainProcess] Task celery_tasks.load_model[201f8038-0d05-4c6c-9869-b6d4a5c138c8] received
[2024-10-31 05:52:49,452: INFO/MainProcess] Task celery_tasks.load_model[938330bf-0654-4092-b196-eade2cef9fa2] received
[2024-10-31 05:52:52,871: WARNING/ForkPoolWorker-1] /home/truongminhphuong4/venv/lib/python3.11/site-packages/segment_anything/build_sam.py:105: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(f)

[2024-10-31 05:53:10,030: WARNING/ForkPoolWorker-1] ----- Load SAM done -----
[2024-10-31 05:53:10,490: WARNING/ForkPoolWorker-1] Loading pipeline components...:   0%|          | 0/6 [00:00<?, ?it/s]
[2024-10-31 05:53:10,981: WARNING/ForkPoolWorker-1] Loading pipeline components...:  17%|#6        | 1/6 [00:00<00:02,  2.04it/s]
[2024-10-31 05:53:11,678: WARNING/ForkPoolWorker-1] Loading pipeline components...:  33%|###3      | 2/6 [00:01<00:02,  1.63it/s]
[2024-10-31 05:53:11,803: WARNING/ForkPoolWorker-1] Loading pipeline components...:  67%|######6   | 4/6 [00:01<00:00,  3.74it/s]
[2024-10-31 05:53:11,898: WARNING/ForkPoolWorker-1] Loading pipeline components...: 100%|##########| 6/6 [00:01<00:00,  4.26it/s]
[2024-10-31 05:53:43,519: WARNING/ForkPoolWorker-1] ----- Load Stable Diffusion done -----
[2024-10-31 05:53:43,547: INFO/ForkPoolWorker-1] Make training model default
[2024-10-31 05:53:43,548: INFO/ForkPoolWorker-1] BaseInpaintingTrainingModule init called
[2024-10-31 05:53:43,548: INFO/ForkPoolWorker-1] Make generator ffc_resnet
[2024-10-31 05:53:44,015: INFO/ForkPoolWorker-1] Generator
FFCResNetGenerator(
  (model): Sequential(
    (0): ReflectionPad2d((3, 3, 3, 3))
    (1): FFC_BN_ACT(
      (ffc): FFC(
        (convl2l): Conv2d(4, 64, kernel_size=(7, 7), stride=(1, 1), bias=False, padding_mode=reflect)
        (convl2g): Identity()
        (convg2l): Identity()
        (convg2g): Identity()
        (gate): Identity()
      )
      (bn_l): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (bn_g): Identity()
      (act_l): ReLU(inplace=True)
      (act_g): Identity()
    )
    (2): FFC_BN_ACT(
      (ffc): FFC(
        (convl2l): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False, padding_mode=reflect)
        (convl2g): Identity()
        (convg2l): Identity()
        (convg2g): Identity()
        (gate): Identity()
      )
      (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (bn_g): Identity()
      (act_l): ReLU(inplace=True)
      (act_g): Identity()
    )
    (3): FFC_BN_ACT(
      (ffc): FFC(
        (convl2l): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False, padding_mode=reflect)
        (convl2g): Identity()
        (convg2l): Identity()
        (convg2g): Identity()
        (gate): Identity()
      )
      (bn_l): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (bn_g): Identity()
      (act_l): ReLU(inplace=True)
      (act_g): Identity()
    )
    (4): FFC_BN_ACT(
      (ffc): FFC(
        (convl2l): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False, padding_mode=reflect)
        (convl2g): Conv2d(256, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False, padding_mode=reflect)
        (convg2l): Identity()
        (convg2g): Identity()
        (gate): Identity()
      )
      (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act_l): ReLU(inplace=True)
      (act_g): ReLU(inplace=True)
    )
    (5): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (6): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (7): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (8): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (9): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (10): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (11): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (12): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (13): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (14): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (15): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (16): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (17): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (18): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (19): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (20): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (21): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (22): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (23): ConcatTupleLayer()
    (24): ConvTranspose2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
    (25): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (26): ReLU(inplace=True)
    (27): ConvTranspose2d(256, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
    (28): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (29): ReLU(inplace=True)
    (30): ConvTranspose2d(128, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
    (31): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (32): ReLU(inplace=True)
    (33): ReflectionPad2d((3, 3, 3, 3))
    (34): Conv2d(64, 3, kernel_size=(7, 7), stride=(1, 1))
    (35): Sigmoid()
  )
)
[2024-10-31 05:53:44,015: INFO/ForkPoolWorker-1] BaseInpaintingTrainingModule init done
[2024-10-31 05:53:44,016: WARNING/ForkPoolWorker-1] /home/truongminhphuong4/server2/inpaint/lama/saicinpainting/training/trainers/__init__.py:27: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state = torch.load(path, map_location=map_location)

[2024-10-31 05:53:46,636: WARNING/ForkPoolWorker-1] ----- Load LaMa done -----
[2024-10-31 05:53:46,636: WARNING/ForkPoolWorker-1] LOAD MODEL DONE!
[2024-10-31 05:53:46,638: INFO/ForkPoolWorker-1] Task celery_tasks.load_model[df2789ba-f459-42ec-aabb-e7ac283503e3] succeeded in 59.15558065900001s: None
[2024-10-31 05:53:46,640: INFO/ForkPoolWorker-1] Task celery_tasks.load_model[201f8038-0d05-4c6c-9869-b6d4a5c138c8] succeeded in 0.0006919599999832826s: None
[2024-10-31 05:53:46,641: INFO/ForkPoolWorker-1] Task celery_tasks.load_model[938330bf-0654-4092-b196-eade2cef9fa2] succeeded in 0.0006207969999536544s: None
[2024-10-31 05:55:08,451: INFO/MainProcess] Task celery_tasks.load_model[c135b1eb-d761-474e-a4d0-5c44c0b534d8] received
[2024-10-31 05:55:08,453: INFO/ForkPoolWorker-1] Task celery_tasks.load_model[c135b1eb-d761-474e-a4d0-5c44c0b534d8] succeeded in 0.0009058859999981905s: None
[2024-10-31 05:55:10,281: INFO/MainProcess] Task celery_tasks.load_model[b7dc7615-14c3-4144-b55c-741f16b7947c] received
[2024-10-31 05:55:10,283: INFO/ForkPoolWorker-1] Task celery_tasks.load_model[b7dc7615-14c3-4144-b55c-741f16b7947c] succeeded in 0.0008241510000175367s: None
[2024-10-31 05:55:10,601: INFO/MainProcess] Task celery_tasks.load_model[9dfd64ab-c8a6-405c-8ef6-226de051092c] received
[2024-10-31 05:55:10,603: INFO/ForkPoolWorker-1] Task celery_tasks.load_model[9dfd64ab-c8a6-405c-8ef6-226de051092c] succeeded in 0.000969295000004422s: None
[2024-10-31 05:55:23,374: INFO/MainProcess] Task celery_tasks.celery_remove_anything[4d0473c3-02a6-4db6-aa9c-7cf8db395d29] received
[2024-10-31 05:55:25,654: INFO/ForkPoolWorker-1] Task celery_tasks.celery_remove_anything[4d0473c3-02a6-4db6-aa9c-7cf8db395d29] succeeded in 2.2787669569999593s: (['cat_2_inpainted_1.jpg', 'cat_2_inpainted_2.jpg', 'cat_2_inpainted_3.jpg'], '8422bd47-9097-4355-bd8b-e339cfdff55a')
[2024-10-31 05:55:35,135: INFO/MainProcess] Task celery_tasks.celery_fill_anything[3d0bc98b-bbd1-42bf-bee4-47f083c5ab09] received
[2024-10-31 05:55:36,353: WARNING/ForkPoolWorker-1]   0%|          | 0/50 [00:00<?, ?it/s]
[2024-10-31 05:55:36,720: WARNING/ForkPoolWorker-1]   2%|2         | 1/50 [00:00<00:17,  2.73it/s]
[2024-10-31 05:55:36,894: WARNING/ForkPoolWorker-1]   4%|4         | 2/50 [00:00<00:12,  3.94it/s]
[2024-10-31 05:55:37,070: WARNING/ForkPoolWorker-1]   6%|6         | 3/50 [00:00<00:10,  4.59it/s]
[2024-10-31 05:55:37,256: WARNING/ForkPoolWorker-1]   8%|8         | 4/50 [00:00<00:09,  4.87it/s]
[2024-10-31 05:55:37,443: WARNING/ForkPoolWorker-1]  10%|#         | 5/50 [00:01<00:08,  5.03it/s]
[2024-10-31 05:55:37,620: WARNING/ForkPoolWorker-1]  12%|#2        | 6/50 [00:01<00:08,  5.22it/s]
[2024-10-31 05:55:37,796: WARNING/ForkPoolWorker-1]  14%|#4        | 7/50 [00:01<00:08,  5.37it/s]
[2024-10-31 05:55:37,971: WARNING/ForkPoolWorker-1]  16%|#6        | 8/50 [00:01<00:07,  5.47it/s]
[2024-10-31 05:55:38,149: WARNING/ForkPoolWorker-1]  18%|#8        | 9/50 [00:01<00:07,  5.52it/s]
[2024-10-31 05:55:38,334: WARNING/ForkPoolWorker-1]  20%|##        | 10/50 [00:01<00:07,  5.49it/s]
[2024-10-31 05:55:38,517: WARNING/ForkPoolWorker-1]  22%|##2       | 11/50 [00:02<00:07,  5.48it/s]
[2024-10-31 05:55:38,694: WARNING/ForkPoolWorker-1]  24%|##4       | 12/50 [00:02<00:06,  5.52it/s]
[2024-10-31 05:55:38,871: WARNING/ForkPoolWorker-1]  26%|##6       | 13/50 [00:02<00:06,  5.56it/s]
[2024-10-31 05:55:39,048: WARNING/ForkPoolWorker-1]  28%|##8       | 14/50 [00:02<00:06,  5.59it/s]
[2024-10-31 05:55:39,231: WARNING/ForkPoolWorker-1]  30%|###       | 15/50 [00:02<00:06,  5.55it/s]
[2024-10-31 05:55:39,419: WARNING/ForkPoolWorker-1]  32%|###2      | 16/50 [00:03<00:06,  5.48it/s]
[2024-10-31 05:55:39,598: WARNING/ForkPoolWorker-1]  34%|###4      | 17/50 [00:03<00:05,  5.51it/s]
[2024-10-31 05:55:39,776: WARNING/ForkPoolWorker-1]  36%|###6      | 18/50 [00:03<00:05,  5.54it/s]
[2024-10-31 05:55:39,954: WARNING/ForkPoolWorker-1]  38%|###8      | 19/50 [00:03<00:05,  5.57it/s]
[2024-10-31 05:55:40,135: WARNING/ForkPoolWorker-1]  40%|####      | 20/50 [00:03<00:05,  5.55it/s]
[2024-10-31 05:55:40,318: WARNING/ForkPoolWorker-1]  42%|####2     | 21/50 [00:03<00:05,  5.52it/s]
[2024-10-31 05:55:40,503: WARNING/ForkPoolWorker-1]  44%|####4     | 22/50 [00:04<00:05,  5.49it/s]
[2024-10-31 05:55:40,683: WARNING/ForkPoolWorker-1]  46%|####6     | 23/50 [00:04<00:04,  5.51it/s]
[2024-10-31 05:55:40,865: WARNING/ForkPoolWorker-1]  48%|####8     | 24/50 [00:04<00:04,  5.51it/s]
[2024-10-31 05:55:41,045: WARNING/ForkPoolWorker-1]  50%|#####     | 25/50 [00:04<00:04,  5.52it/s]
[2024-10-31 05:55:41,226: WARNING/ForkPoolWorker-1]  52%|#####2    | 26/50 [00:04<00:04,  5.52it/s]
[2024-10-31 05:55:41,409: WARNING/ForkPoolWorker-1]  54%|#####4    | 27/50 [00:05<00:04,  5.50it/s]
[2024-10-31 05:55:41,590: WARNING/ForkPoolWorker-1]  56%|#####6    | 28/50 [00:05<00:03,  5.51it/s]
[2024-10-31 05:55:41,769: WARNING/ForkPoolWorker-1]  58%|#####8    | 29/50 [00:05<00:03,  5.53it/s]
[2024-10-31 05:55:41,946: WARNING/ForkPoolWorker-1]  60%|######    | 30/50 [00:05<00:03,  5.57it/s]
[2024-10-31 05:55:42,127: WARNING/ForkPoolWorker-1]  62%|######2   | 31/50 [00:05<00:03,  5.56it/s]
[2024-10-31 05:55:42,309: WARNING/ForkPoolWorker-1]  64%|######4   | 32/50 [00:05<00:03,  5.53it/s]
[2024-10-31 05:55:42,490: WARNING/ForkPoolWorker-1]  66%|######6   | 33/50 [00:06<00:03,  5.53it/s]
[2024-10-31 05:55:42,673: WARNING/ForkPoolWorker-1]  68%|######8   | 34/50 [00:06<00:02,  5.51it/s]
[2024-10-31 05:55:42,854: WARNING/ForkPoolWorker-1]  70%|#######   | 35/50 [00:06<00:02,  5.52it/s]
[2024-10-31 05:55:43,034: WARNING/ForkPoolWorker-1]  72%|#######2  | 36/50 [00:06<00:02,  5.53it/s]
[2024-10-31 05:55:43,215: WARNING/ForkPoolWorker-1]  74%|#######4  | 37/50 [00:06<00:02,  5.53it/s]
[2024-10-31 05:55:43,396: WARNING/ForkPoolWorker-1]  76%|#######6  | 38/50 [00:07<00:02,  5.52it/s]
[2024-10-31 05:55:43,578: WARNING/ForkPoolWorker-1]  78%|#######8  | 39/50 [00:07<00:01,  5.52it/s]
[2024-10-31 05:55:43,757: WARNING/ForkPoolWorker-1]  80%|########  | 40/50 [00:07<00:01,  5.53it/s]
[2024-10-31 05:55:43,937: WARNING/ForkPoolWorker-1]  82%|########2 | 41/50 [00:07<00:01,  5.54it/s]
[2024-10-31 05:55:44,118: WARNING/ForkPoolWorker-1]  84%|########4 | 42/50 [00:07<00:01,  5.54it/s]
[2024-10-31 05:55:44,299: WARNING/ForkPoolWorker-1]  86%|########6 | 43/50 [00:07<00:01,  5.54it/s]
[2024-10-31 05:55:44,480: WARNING/ForkPoolWorker-1]  88%|########8 | 44/50 [00:08<00:01,  5.53it/s]
[2024-10-31 05:55:44,662: WARNING/ForkPoolWorker-1]  90%|######### | 45/50 [00:08<00:00,  5.52it/s]
[2024-10-31 05:55:44,845: WARNING/ForkPoolWorker-1]  92%|#########2| 46/50 [00:08<00:00,  5.50it/s]
[2024-10-31 05:55:45,027: WARNING/ForkPoolWorker-1]  94%|#########3| 47/50 [00:08<00:00,  5.50it/s]
[2024-10-31 05:55:45,208: WARNING/ForkPoolWorker-1]  96%|#########6| 48/50 [00:08<00:00,  5.51it/s]
[2024-10-31 05:55:45,389: WARNING/ForkPoolWorker-1]  98%|#########8| 49/50 [00:09<00:00,  5.51it/s]
[2024-10-31 05:55:45,573: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.49it/s]
[2024-10-31 05:55:45,573: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.42it/s]
[2024-10-31 05:55:45,767: INFO/ForkPoolWorker-1] Task celery_tasks.celery_fill_anything[3d0bc98b-bbd1-42bf-bee4-47f083c5ab09] succeeded in 10.631442224000011s: ('cat_2_inpainted.jpg', '8422bd47-9097-4355-bd8b-e339cfdff55a')
[2024-10-31 05:56:19,155: INFO/MainProcess] Task celery_tasks.celery_fill_anything[a8e6e187-8034-45f8-b90b-21dae1512b54] received
[2024-10-31 05:56:20,197: WARNING/ForkPoolWorker-1]   0%|          | 0/50 [00:00<?, ?it/s]
[2024-10-31 05:56:20,653: WARNING/ForkPoolWorker-1]   2%|2         | 1/50 [00:00<00:22,  2.20it/s]
[2024-10-31 05:56:20,831: WARNING/ForkPoolWorker-1]   4%|4         | 2/50 [00:00<00:14,  3.42it/s]
[2024-10-31 05:56:21,009: WARNING/ForkPoolWorker-1]   6%|6         | 3/50 [00:00<00:11,  4.17it/s]
[2024-10-31 05:56:21,200: WARNING/ForkPoolWorker-1]   8%|8         | 4/50 [00:01<00:10,  4.53it/s]
[2024-10-31 05:56:21,386: WARNING/ForkPoolWorker-1]  10%|#         | 5/50 [00:01<00:09,  4.81it/s]
[2024-10-31 05:56:21,567: WARNING/ForkPoolWorker-1]  12%|#2        | 6/50 [00:01<00:08,  5.03it/s]
[2024-10-31 05:56:21,745: WARNING/ForkPoolWorker-1]  14%|#4        | 7/50 [00:01<00:08,  5.20it/s]
[2024-10-31 05:56:21,924: WARNING/ForkPoolWorker-1]  16%|#6        | 8/50 [00:01<00:07,  5.32it/s]
[2024-10-31 05:56:22,108: WARNING/ForkPoolWorker-1]  18%|#8        | 9/50 [00:01<00:07,  5.36it/s]
[2024-10-31 05:56:22,293: WARNING/ForkPoolWorker-1]  20%|##        | 10/50 [00:02<00:07,  5.37it/s]
[2024-10-31 05:56:22,477: WARNING/ForkPoolWorker-1]  22%|##2       | 11/50 [00:02<00:07,  5.39it/s]
[2024-10-31 05:56:22,659: WARNING/ForkPoolWorker-1]  24%|##4       | 12/50 [00:02<00:07,  5.42it/s]
[2024-10-31 05:56:22,839: WARNING/ForkPoolWorker-1]  26%|##6       | 13/50 [00:02<00:06,  5.46it/s]
[2024-10-31 05:56:23,019: WARNING/ForkPoolWorker-1]  28%|##8       | 14/50 [00:02<00:06,  5.49it/s]
[2024-10-31 05:56:23,205: WARNING/ForkPoolWorker-1]  30%|###       | 15/50 [00:03<00:06,  5.45it/s]
[2024-10-31 05:56:23,390: WARNING/ForkPoolWorker-1]  32%|###2      | 16/50 [00:03<00:06,  5.44it/s]
[2024-10-31 05:56:23,574: WARNING/ForkPoolWorker-1]  34%|###4      | 17/50 [00:03<00:06,  5.44it/s]
[2024-10-31 05:56:23,755: WARNING/ForkPoolWorker-1]  36%|###6      | 18/50 [00:03<00:05,  5.47it/s]
[2024-10-31 05:56:23,935: WARNING/ForkPoolWorker-1]  38%|###8      | 19/50 [00:03<00:05,  5.49it/s]
[2024-10-31 05:56:24,118: WARNING/ForkPoolWorker-1]  40%|####      | 20/50 [00:03<00:05,  5.48it/s]
[2024-10-31 05:56:24,306: WARNING/ForkPoolWorker-1]  42%|####2     | 21/50 [00:04<00:05,  5.43it/s]
[2024-10-31 05:56:24,488: WARNING/ForkPoolWorker-1]  44%|####4     | 22/50 [00:04<00:05,  5.45it/s]
[2024-10-31 05:56:24,669: WARNING/ForkPoolWorker-1]  46%|####6     | 23/50 [00:04<00:04,  5.48it/s]
[2024-10-31 05:56:24,853: WARNING/ForkPoolWorker-1]  48%|####8     | 24/50 [00:04<00:04,  5.46it/s]
[2024-10-31 05:56:25,035: WARNING/ForkPoolWorker-1]  50%|#####     | 25/50 [00:04<00:04,  5.47it/s]
[2024-10-31 05:56:25,219: WARNING/ForkPoolWorker-1]  52%|#####2    | 26/50 [00:05<00:04,  5.46it/s]
[2024-10-31 05:56:25,403: WARNING/ForkPoolWorker-1]  54%|#####4    | 27/50 [00:05<00:04,  5.45it/s]
[2024-10-31 05:56:25,586: WARNING/ForkPoolWorker-1]  56%|#####6    | 28/50 [00:05<00:04,  5.46it/s]
[2024-10-31 05:56:25,766: WARNING/ForkPoolWorker-1]  58%|#####8    | 29/50 [00:05<00:03,  5.49it/s]
[2024-10-31 05:56:25,948: WARNING/ForkPoolWorker-1]  60%|######    | 30/50 [00:05<00:03,  5.49it/s]
[2024-10-31 05:56:26,137: WARNING/ForkPoolWorker-1]  62%|######2   | 31/50 [00:05<00:03,  5.42it/s]
[2024-10-31 05:56:26,321: WARNING/ForkPoolWorker-1]  64%|######4   | 32/50 [00:06<00:03,  5.43it/s]
[2024-10-31 05:56:26,505: WARNING/ForkPoolWorker-1]  66%|######6   | 33/50 [00:06<00:03,  5.44it/s]
[2024-10-31 05:56:26,688: WARNING/ForkPoolWorker-1]  68%|######8   | 34/50 [00:06<00:02,  5.44it/s]
[2024-10-31 05:56:26,876: WARNING/ForkPoolWorker-1]  70%|#######   | 35/50 [00:06<00:02,  5.41it/s]
[2024-10-31 05:56:27,060: WARNING/ForkPoolWorker-1]  72%|#######2  | 36/50 [00:06<00:02,  5.41it/s]
[2024-10-31 05:56:27,244: WARNING/ForkPoolWorker-1]  74%|#######4  | 37/50 [00:07<00:02,  5.42it/s]
[2024-10-31 05:56:27,425: WARNING/ForkPoolWorker-1]  76%|#######6  | 38/50 [00:07<00:02,  5.45it/s]
[2024-10-31 05:56:27,609: WARNING/ForkPoolWorker-1]  78%|#######8  | 39/50 [00:07<00:02,  5.45it/s]
[2024-10-31 05:56:27,795: WARNING/ForkPoolWorker-1]  80%|########  | 40/50 [00:07<00:01,  5.42it/s]
[2024-10-31 05:56:27,979: WARNING/ForkPoolWorker-1]  82%|########2 | 41/50 [00:07<00:01,  5.43it/s]
[2024-10-31 05:56:28,163: WARNING/ForkPoolWorker-1]  84%|########4 | 42/50 [00:07<00:01,  5.43it/s]
[2024-10-31 05:56:28,350: WARNING/ForkPoolWorker-1]  86%|########6 | 43/50 [00:08<00:01,  5.41it/s]
[2024-10-31 05:56:28,538: WARNING/ForkPoolWorker-1]  88%|########8 | 44/50 [00:08<00:01,  5.38it/s]
[2024-10-31 05:56:28,723: WARNING/ForkPoolWorker-1]  90%|######### | 45/50 [00:08<00:00,  5.39it/s]
[2024-10-31 05:56:28,906: WARNING/ForkPoolWorker-1]  92%|#########2| 46/50 [00:08<00:00,  5.41it/s]
[2024-10-31 05:56:29,093: WARNING/ForkPoolWorker-1]  94%|#########3| 47/50 [00:08<00:00,  5.39it/s]
[2024-10-31 05:56:29,277: WARNING/ForkPoolWorker-1]  96%|#########6| 48/50 [00:09<00:00,  5.40it/s]
[2024-10-31 05:56:29,464: WARNING/ForkPoolWorker-1]  98%|#########8| 49/50 [00:09<00:00,  5.39it/s]
[2024-10-31 05:56:29,649: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.39it/s]
[2024-10-31 05:56:29,650: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.29it/s]
[2024-10-31 05:56:29,841: INFO/ForkPoolWorker-1] Task celery_tasks.celery_fill_anything[a8e6e187-8034-45f8-b90b-21dae1512b54] succeeded in 10.685228295000002s: ('cat_2_inpainted.jpg', 'dc501fcb-2723-4328-8f46-09d780809763')
[2024-10-31 05:57:15,006: INFO/MainProcess] Task celery_tasks.celery_remove_anything[428eaf16-71e3-4ec8-993f-e0647082cdb6] received
[2024-10-31 05:57:16,428: INFO/ForkPoolWorker-1] Task celery_tasks.celery_remove_anything[428eaf16-71e3-4ec8-993f-e0647082cdb6] succeeded in 1.421897250000029s: (['sharkcute_inpainted_1.jpg', 'sharkcute_inpainted_2.jpg', 'sharkcute_inpainted_3.jpg'], '1c4762ef-6319-4814-8b5a-98987cae11de')
[2024-10-31 05:57:32,103: INFO/MainProcess] Task celery_tasks.celery_fill_anything[c1e17cb5-84cc-44b2-a7ae-7114821e08e2] received
[2024-10-31 05:57:33,175: WARNING/ForkPoolWorker-1]   0%|          | 0/50 [00:00<?, ?it/s]
[2024-10-31 05:57:33,636: WARNING/ForkPoolWorker-1]   2%|2         | 1/50 [00:00<00:22,  2.17it/s]
[2024-10-31 05:57:33,818: WARNING/ForkPoolWorker-1]   4%|4         | 2/50 [00:00<00:14,  3.37it/s]
[2024-10-31 05:57:34,002: WARNING/ForkPoolWorker-1]   6%|6         | 3/50 [00:00<00:11,  4.08it/s]
[2024-10-31 05:57:34,197: WARNING/ForkPoolWorker-1]   8%|8         | 4/50 [00:01<00:10,  4.44it/s]
[2024-10-31 05:57:34,386: WARNING/ForkPoolWorker-1]  10%|#         | 5/50 [00:01<00:09,  4.71it/s]
[2024-10-31 05:57:34,569: WARNING/ForkPoolWorker-1]  12%|#2        | 6/50 [00:01<00:08,  4.94it/s]
[2024-10-31 05:57:34,754: WARNING/ForkPoolWorker-1]  14%|#4        | 7/50 [00:01<00:08,  5.09it/s]
[2024-10-31 05:57:34,937: WARNING/ForkPoolWorker-1]  16%|#6        | 8/50 [00:01<00:08,  5.20it/s]
[2024-10-31 05:57:35,124: WARNING/ForkPoolWorker-1]  18%|#8        | 9/50 [00:01<00:07,  5.24it/s]
[2024-10-31 05:57:35,317: WARNING/ForkPoolWorker-1]  20%|##        | 10/50 [00:02<00:07,  5.22it/s]
[2024-10-31 05:57:35,504: WARNING/ForkPoolWorker-1]  22%|##2       | 11/50 [00:02<00:07,  5.27it/s]
[2024-10-31 05:57:35,688: WARNING/ForkPoolWorker-1]  24%|##4       | 12/50 [00:02<00:07,  5.31it/s]
[2024-10-31 05:57:35,875: WARNING/ForkPoolWorker-1]  26%|##6       | 13/50 [00:02<00:06,  5.32it/s]
[2024-10-31 05:57:36,064: WARNING/ForkPoolWorker-1]  28%|##8       | 14/50 [00:02<00:06,  5.31it/s]
[2024-10-31 05:57:36,256: WARNING/ForkPoolWorker-1]  30%|###       | 15/50 [00:03<00:06,  5.28it/s]
[2024-10-31 05:57:36,444: WARNING/ForkPoolWorker-1]  32%|###2      | 16/50 [00:03<00:06,  5.29it/s]
[2024-10-31 05:57:36,632: WARNING/ForkPoolWorker-1]  34%|###4      | 17/50 [00:03<00:06,  5.30it/s]
[2024-10-31 05:57:36,816: WARNING/ForkPoolWorker-1]  36%|###6      | 18/50 [00:03<00:05,  5.34it/s]
[2024-10-31 05:57:37,003: WARNING/ForkPoolWorker-1]  38%|###8      | 19/50 [00:03<00:05,  5.34it/s]
[2024-10-31 05:57:37,196: WARNING/ForkPoolWorker-1]  40%|####      | 20/50 [00:04<00:05,  5.29it/s]
[2024-10-31 05:57:37,384: WARNING/ForkPoolWorker-1]  42%|####2     | 21/50 [00:04<00:05,  5.30it/s]
[2024-10-31 05:57:37,574: WARNING/ForkPoolWorker-1]  44%|####4     | 22/50 [00:04<00:05,  5.29it/s]
[2024-10-31 05:57:37,762: WARNING/ForkPoolWorker-1]  46%|####6     | 23/50 [00:04<00:05,  5.30it/s]
[2024-10-31 05:57:37,948: WARNING/ForkPoolWorker-1]  48%|####8     | 24/50 [00:04<00:04,  5.32it/s]
[2024-10-31 05:57:38,137: WARNING/ForkPoolWorker-1]  50%|#####     | 25/50 [00:04<00:04,  5.32it/s]
[2024-10-31 05:57:38,325: WARNING/ForkPoolWorker-1]  52%|#####2    | 26/50 [00:05<00:04,  5.31it/s]
[2024-10-31 05:57:38,515: WARNING/ForkPoolWorker-1]  54%|#####4    | 27/50 [00:05<00:04,  5.30it/s]
[2024-10-31 05:57:38,704: WARNING/ForkPoolWorker-1]  56%|#####6    | 28/50 [00:05<00:04,  5.30it/s]
[2024-10-31 05:57:38,892: WARNING/ForkPoolWorker-1]  58%|#####8    | 29/50 [00:05<00:03,  5.31it/s]
[2024-10-31 05:57:39,077: WARNING/ForkPoolWorker-1]  60%|######    | 30/50 [00:05<00:03,  5.33it/s]
[2024-10-31 05:57:39,268: WARNING/ForkPoolWorker-1]  62%|######2   | 31/50 [00:06<00:03,  5.31it/s]
[2024-10-31 05:57:39,459: WARNING/ForkPoolWorker-1]  64%|######4   | 32/50 [00:06<00:03,  5.28it/s]
[2024-10-31 05:57:39,649: WARNING/ForkPoolWorker-1]  66%|######6   | 33/50 [00:06<00:03,  5.28it/s]
[2024-10-31 05:57:39,837: WARNING/ForkPoolWorker-1]  68%|######8   | 34/50 [00:06<00:03,  5.29it/s]
[2024-10-31 05:57:40,021: WARNING/ForkPoolWorker-1]  70%|#######   | 35/50 [00:06<00:02,  5.33it/s]
[2024-10-31 05:57:40,212: WARNING/ForkPoolWorker-1]  72%|#######2  | 36/50 [00:07<00:02,  5.30it/s]
[2024-10-31 05:57:40,404: WARNING/ForkPoolWorker-1]  74%|#######4  | 37/50 [00:07<00:02,  5.27it/s]
[2024-10-31 05:57:40,597: WARNING/ForkPoolWorker-1]  76%|#######6  | 38/50 [00:07<00:02,  5.25it/s]
[2024-10-31 05:57:40,783: WARNING/ForkPoolWorker-1]  78%|#######8  | 39/50 [00:07<00:02,  5.29it/s]
[2024-10-31 05:57:40,974: WARNING/ForkPoolWorker-1]  80%|########  | 40/50 [00:07<00:01,  5.27it/s]
[2024-10-31 05:57:41,160: WARNING/ForkPoolWorker-1]  82%|########2 | 41/50 [00:07<00:01,  5.30it/s]
[2024-10-31 05:57:41,353: WARNING/ForkPoolWorker-1]  84%|########4 | 42/50 [00:08<00:01,  5.26it/s]
[2024-10-31 05:57:41,542: WARNING/ForkPoolWorker-1]  86%|########6 | 43/50 [00:08<00:01,  5.27it/s]
[2024-10-31 05:57:41,732: WARNING/ForkPoolWorker-1]  88%|########8 | 44/50 [00:08<00:01,  5.27it/s]
[2024-10-31 05:57:41,922: WARNING/ForkPoolWorker-1]  90%|######### | 45/50 [00:08<00:00,  5.27it/s]
[2024-10-31 05:57:42,109: WARNING/ForkPoolWorker-1]  92%|#########2| 46/50 [00:08<00:00,  5.29it/s]
[2024-10-31 05:57:42,298: WARNING/ForkPoolWorker-1]  94%|#########3| 47/50 [00:09<00:00,  5.29it/s]
[2024-10-31 05:57:42,486: WARNING/ForkPoolWorker-1]  96%|#########6| 48/50 [00:09<00:00,  5.30it/s]
[2024-10-31 05:57:42,680: WARNING/ForkPoolWorker-1]  98%|#########8| 49/50 [00:09<00:00,  5.26it/s]
[2024-10-31 05:57:42,870: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.25it/s]
[2024-10-31 05:57:42,871: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.16it/s]
[2024-10-31 05:57:43,065: ERROR/ForkPoolWorker-1] Task celery_tasks.celery_fill_anything[c1e17cb5-84cc-44b2-a7ae-7114821e08e2] raised unexpected: ValueError('could not broadcast input array from shape (512,512,3) into shape (457,512,3)')
Traceback (most recent call last):
  File "/home/truongminhphuong4/venv/lib/python3.11/site-packages/celery/app/trace.py", line 453, in trace_task
    R = retval = fun(*args, **kwargs)
                 ^^^^^^^^^^^^^^^^^^^^
  File "/home/truongminhphuong4/venv/lib/python3.11/site-packages/celery/app/trace.py", line 736, in __protected_call__
    return self.run(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/truongminhphuong4/server2/celery_tasks.py", line 66, in celery_fill_anything
    img_inpainted, filename = processor.fill_anything(filename, input_img_path, point_coords, text_prompt, dilate_kernel_size, mask_index)
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/truongminhphuong4/server2/inpaint/main.py", line 198, in fill_anything
    img_replaced = self.fill_img_with_sd(img, mask, text_prompt)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/truongminhphuong4/server2/inpaint/main.py", line 89, in fill_img_with_sd
    img_filled = crop_for_filling_post(img, mask, np.array(img_crop_filled))
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/truongminhphuong4/server2/inpaint/crop.py", line 168, in crop_for_filling_post
    image[crop_y:crop_y + crop_size, crop_x:crop_x + crop_size] = filled_image
    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ValueError: could not broadcast input array from shape (512,512,3) into shape (457,512,3)
[2024-10-31 05:58:34,781: INFO/MainProcess] Task celery_tasks.load_model[792e86ae-e5a9-4839-aad7-1253c54e3b47] received
[2024-10-31 05:58:34,782: INFO/ForkPoolWorker-1] Task celery_tasks.load_model[792e86ae-e5a9-4839-aad7-1253c54e3b47] succeeded in 0.0009307740000394915s: None
[2024-10-31 05:58:52,553: INFO/MainProcess] Task celery_tasks.celery_fill_anything[c7b9efea-8b4a-4350-b2d7-4c67fd2a295c] received
[2024-10-31 05:58:53,643: WARNING/ForkPoolWorker-1]   0%|          | 0/50 [00:00<?, ?it/s]
[2024-10-31 05:58:54,109: WARNING/ForkPoolWorker-1]   2%|2         | 1/50 [00:00<00:22,  2.15it/s]
[2024-10-31 05:58:54,292: WARNING/ForkPoolWorker-1]   4%|4         | 2/50 [00:00<00:14,  3.34it/s]
[2024-10-31 05:58:54,479: WARNING/ForkPoolWorker-1]   6%|6         | 3/50 [00:00<00:11,  4.03it/s]
[2024-10-31 05:58:54,677: WARNING/ForkPoolWorker-1]   8%|8         | 4/50 [00:01<00:10,  4.38it/s]
[2024-10-31 05:58:54,869: WARNING/ForkPoolWorker-1]  10%|#         | 5/50 [00:01<00:09,  4.65it/s]
[2024-10-31 05:58:55,055: WARNING/ForkPoolWorker-1]  12%|#2        | 6/50 [00:01<00:09,  4.87it/s]
[2024-10-31 05:58:55,242: WARNING/ForkPoolWorker-1]  14%|#4        | 7/50 [00:01<00:08,  5.02it/s]
[2024-10-31 05:58:55,430: WARNING/ForkPoolWorker-1]  16%|#6        | 8/50 [00:01<00:08,  5.11it/s]
[2024-10-31 05:58:55,621: WARNING/ForkPoolWorker-1]  18%|#8        | 9/50 [00:01<00:07,  5.15it/s]
[2024-10-31 05:58:55,814: WARNING/ForkPoolWorker-1]  20%|##        | 10/50 [00:02<00:07,  5.15it/s]
[2024-10-31 05:58:56,001: WARNING/ForkPoolWorker-1]  22%|##2       | 11/50 [00:02<00:07,  5.21it/s]
[2024-10-31 05:58:56,187: WARNING/ForkPoolWorker-1]  24%|##4       | 12/50 [00:02<00:07,  5.26it/s]
[2024-10-31 05:58:56,376: WARNING/ForkPoolWorker-1]  26%|##6       | 13/50 [00:02<00:07,  5.27it/s]
[2024-10-31 05:58:56,568: WARNING/ForkPoolWorker-1]  28%|##8       | 14/50 [00:02<00:06,  5.25it/s]
[2024-10-31 05:58:56,759: WARNING/ForkPoolWorker-1]  30%|###       | 15/50 [00:03<00:06,  5.25it/s]
[2024-10-31 05:58:56,949: WARNING/ForkPoolWorker-1]  32%|###2      | 16/50 [00:03<00:06,  5.25it/s]
[2024-10-31 05:58:57,137: WARNING/ForkPoolWorker-1]  34%|###4      | 17/50 [00:03<00:06,  5.27it/s]
[2024-10-31 05:58:57,326: WARNING/ForkPoolWorker-1]  36%|###6      | 18/50 [00:03<00:06,  5.28it/s]
[2024-10-31 05:58:57,517: WARNING/ForkPoolWorker-1]  38%|###8      | 19/50 [00:03<00:05,  5.26it/s]
[2024-10-31 05:58:57,710: WARNING/ForkPoolWorker-1]  40%|####      | 20/50 [00:04<00:05,  5.24it/s]
[2024-10-31 05:58:57,899: WARNING/ForkPoolWorker-1]  42%|####2     | 21/50 [00:04<00:05,  5.25it/s]
[2024-10-31 05:58:58,090: WARNING/ForkPoolWorker-1]  44%|####4     | 22/50 [00:04<00:05,  5.25it/s]
[2024-10-31 05:58:58,277: WARNING/ForkPoolWorker-1]  46%|####6     | 23/50 [00:04<00:05,  5.28it/s]
[2024-10-31 05:58:58,468: WARNING/ForkPoolWorker-1]  48%|####8     | 24/50 [00:04<00:04,  5.26it/s]
[2024-10-31 05:58:58,660: WARNING/ForkPoolWorker-1]  50%|#####     | 25/50 [00:05<00:04,  5.26it/s]
[2024-10-31 05:58:58,849: WARNING/ForkPoolWorker-1]  52%|#####2    | 26/50 [00:05<00:04,  5.26it/s]
[2024-10-31 05:58:59,038: WARNING/ForkPoolWorker-1]  54%|#####4    | 27/50 [00:05<00:04,  5.27it/s]
[2024-10-31 05:58:59,228: WARNING/ForkPoolWorker-1]  56%|#####6    | 28/50 [00:05<00:04,  5.27it/s]
[2024-10-31 05:58:59,417: WARNING/ForkPoolWorker-1]  58%|#####8    | 29/50 [00:05<00:03,  5.27it/s]
[2024-10-31 05:58:59,609: WARNING/ForkPoolWorker-1]  60%|######    | 30/50 [00:05<00:03,  5.25it/s]
[2024-10-31 05:58:59,798: WARNING/ForkPoolWorker-1]  62%|######2   | 31/50 [00:06<00:03,  5.27it/s]
[2024-10-31 05:58:59,988: WARNING/ForkPoolWorker-1]  64%|######4   | 32/50 [00:06<00:03,  5.26it/s]
[2024-10-31 05:59:00,177: WARNING/ForkPoolWorker-1]  66%|######6   | 33/50 [00:06<00:03,  5.27it/s]
[2024-10-31 05:59:00,370: WARNING/ForkPoolWorker-1]  68%|######8   | 34/50 [00:06<00:03,  5.25it/s]
[2024-10-31 05:59:00,558: WARNING/ForkPoolWorker-1]  70%|#######   | 35/50 [00:06<00:02,  5.27it/s]
[2024-10-31 05:59:00,750: WARNING/ForkPoolWorker-1]  72%|#######2  | 36/50 [00:07<00:02,  5.25it/s]
[2024-10-31 05:59:00,941: WARNING/ForkPoolWorker-1]  74%|#######4  | 37/50 [00:07<00:02,  5.24it/s]
[2024-10-31 05:59:01,131: WARNING/ForkPoolWorker-1]  76%|#######6  | 38/50 [00:07<00:02,  5.26it/s]
[2024-10-31 05:59:01,324: WARNING/ForkPoolWorker-1]  78%|#######8  | 39/50 [00:07<00:02,  5.23it/s]
[2024-10-31 05:59:01,514: WARNING/ForkPoolWorker-1]  80%|########  | 40/50 [00:07<00:01,  5.24it/s]
[2024-10-31 05:59:01,708: WARNING/ForkPoolWorker-1]  82%|########2 | 41/50 [00:08<00:01,  5.21it/s]
[2024-10-31 05:59:01,897: WARNING/ForkPoolWorker-1]  84%|########4 | 42/50 [00:08<00:01,  5.24it/s]
[2024-10-31 05:59:02,086: WARNING/ForkPoolWorker-1]  86%|########6 | 43/50 [00:08<00:01,  5.25it/s]
[2024-10-31 05:59:02,278: WARNING/ForkPoolWorker-1]  88%|########8 | 44/50 [00:08<00:01,  5.24it/s]
[2024-10-31 05:59:02,471: WARNING/ForkPoolWorker-1]  90%|######### | 45/50 [00:08<00:00,  5.22it/s]
[2024-10-31 05:59:02,660: WARNING/ForkPoolWorker-1]  92%|#########2| 46/50 [00:09<00:00,  5.24it/s]
[2024-10-31 05:59:02,855: WARNING/ForkPoolWorker-1]  94%|#########3| 47/50 [00:09<00:00,  5.21it/s]
[2024-10-31 05:59:03,047: WARNING/ForkPoolWorker-1]  96%|#########6| 48/50 [00:09<00:00,  5.21it/s]
[2024-10-31 05:59:03,239: WARNING/ForkPoolWorker-1]  98%|#########8| 49/50 [00:09<00:00,  5.20it/s]
[2024-10-31 05:59:03,430: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.22it/s]
[2024-10-31 05:59:03,430: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.11it/s]
[2024-10-31 05:59:03,629: INFO/ForkPoolWorker-1] Task celery_tasks.celery_fill_anything[c7b9efea-8b4a-4350-b2d7-4c67fd2a295c] succeeded in 11.074994466000021s: ('sharkcute_inpainted.jpg', 'd30acc94-db8e-431a-881f-30ff4a2bdd22')
[2024-10-31 06:00:13,235: INFO/MainProcess] Task celery_tasks.load_model[6f8b5030-d740-4fd7-8a8c-687acb67e56d] received
[2024-10-31 06:00:13,236: INFO/ForkPoolWorker-1] Task celery_tasks.load_model[6f8b5030-d740-4fd7-8a8c-687acb67e56d] succeeded in 0.0007244370000307754s: None
[2024-10-31 06:00:25,672: INFO/MainProcess] Task celery_tasks.celery_fill_anything[e40521b9-d162-460a-9455-0fb14bb191bb] received
[2024-10-31 06:00:26,774: WARNING/ForkPoolWorker-1]   0%|          | 0/50 [00:00<?, ?it/s]
[2024-10-31 06:00:27,239: WARNING/ForkPoolWorker-1]   2%|2         | 1/50 [00:00<00:22,  2.15it/s]
[2024-10-31 06:00:27,427: WARNING/ForkPoolWorker-1]   4%|4         | 2/50 [00:00<00:14,  3.31it/s]
[2024-10-31 06:00:27,614: WARNING/ForkPoolWorker-1]   6%|6         | 3/50 [00:00<00:11,  4.01it/s]
[2024-10-31 06:00:27,811: WARNING/ForkPoolWorker-1]   8%|8         | 4/50 [00:01<00:10,  4.37it/s]
[2024-10-31 06:00:27,998: WARNING/ForkPoolWorker-1]  10%|#         | 5/50 [00:01<00:09,  4.68it/s]
[2024-10-31 06:00:28,186: WARNING/ForkPoolWorker-1]  12%|#2        | 6/50 [00:01<00:09,  4.88it/s]
[2024-10-31 06:00:28,370: WARNING/ForkPoolWorker-1]  14%|#4        | 7/50 [00:01<00:08,  5.04it/s]
[2024-10-31 06:00:28,558: WARNING/ForkPoolWorker-1]  16%|#6        | 8/50 [00:01<00:08,  5.13it/s]
[2024-10-31 06:00:28,751: WARNING/ForkPoolWorker-1]  18%|#8        | 9/50 [00:01<00:07,  5.15it/s]
[2024-10-31 06:00:28,939: WARNING/ForkPoolWorker-1]  20%|##        | 10/50 [00:02<00:07,  5.20it/s]
[2024-10-31 06:00:29,128: WARNING/ForkPoolWorker-1]  22%|##2       | 11/50 [00:02<00:07,  5.22it/s]
[2024-10-31 06:00:29,316: WARNING/ForkPoolWorker-1]  24%|##4       | 12/50 [00:02<00:07,  5.26it/s]
[2024-10-31 06:00:29,503: WARNING/ForkPoolWorker-1]  26%|##6       | 13/50 [00:02<00:07,  5.28it/s]
[2024-10-31 06:00:29,696: WARNING/ForkPoolWorker-1]  28%|##8       | 14/50 [00:02<00:06,  5.25it/s]
[2024-10-31 06:00:29,886: WARNING/ForkPoolWorker-1]  30%|###       | 15/50 [00:03<00:06,  5.26it/s]
[2024-10-31 06:00:30,077: WARNING/ForkPoolWorker-1]  32%|###2      | 16/50 [00:03<00:06,  5.25it/s]
[2024-10-31 06:00:30,265: WARNING/ForkPoolWorker-1]  34%|###4      | 17/50 [00:03<00:06,  5.27it/s]
[2024-10-31 06:00:30,453: WARNING/ForkPoolWorker-1]  36%|###6      | 18/50 [00:03<00:06,  5.29it/s]
[2024-10-31 06:00:30,642: WARNING/ForkPoolWorker-1]  38%|###8      | 19/50 [00:03<00:05,  5.28it/s]
[2024-10-31 06:00:30,837: WARNING/ForkPoolWorker-1]  40%|####      | 20/50 [00:04<00:05,  5.24it/s]
[2024-10-31 06:00:31,029: WARNING/ForkPoolWorker-1]  42%|####2     | 21/50 [00:04<00:05,  5.23it/s]
[2024-10-31 06:00:31,225: WARNING/ForkPoolWorker-1]  44%|####4     | 22/50 [00:04<00:05,  5.19it/s]
[2024-10-31 06:00:31,419: WARNING/ForkPoolWorker-1]  46%|####6     | 23/50 [00:04<00:05,  5.18it/s]
[2024-10-31 06:00:31,610: WARNING/ForkPoolWorker-1]  48%|####8     | 24/50 [00:04<00:05,  5.19it/s]
[2024-10-31 06:00:31,807: WARNING/ForkPoolWorker-1]  50%|#####     | 25/50 [00:05<00:04,  5.16it/s]
[2024-10-31 06:00:32,000: WARNING/ForkPoolWorker-1]  52%|#####2    | 26/50 [00:05<00:04,  5.16it/s]
[2024-10-31 06:00:32,194: WARNING/ForkPoolWorker-1]  54%|#####4    | 27/50 [00:05<00:04,  5.16it/s]
[2024-10-31 06:00:32,387: WARNING/ForkPoolWorker-1]  56%|#####6    | 28/50 [00:05<00:04,  5.17it/s]
[2024-10-31 06:00:32,579: WARNING/ForkPoolWorker-1]  58%|#####8    | 29/50 [00:05<00:04,  5.18it/s]
[2024-10-31 06:00:32,771: WARNING/ForkPoolWorker-1]  60%|######    | 30/50 [00:05<00:03,  5.19it/s]
[2024-10-31 06:00:32,963: WARNING/ForkPoolWorker-1]  62%|######2   | 31/50 [00:06<00:03,  5.20it/s]
[2024-10-31 06:00:33,157: WARNING/ForkPoolWorker-1]  64%|######4   | 32/50 [00:06<00:03,  5.18it/s]
[2024-10-31 06:00:33,350: WARNING/ForkPoolWorker-1]  66%|######6   | 33/50 [00:06<00:03,  5.19it/s]
[2024-10-31 06:00:33,547: WARNING/ForkPoolWorker-1]  68%|######8   | 34/50 [00:06<00:03,  5.15it/s]
[2024-10-31 06:00:33,741: WARNING/ForkPoolWorker-1]  70%|#######   | 35/50 [00:06<00:02,  5.15it/s]
[2024-10-31 06:00:33,931: WARNING/ForkPoolWorker-1]  72%|#######2  | 36/50 [00:07<00:02,  5.18it/s]
[2024-10-31 06:00:34,126: WARNING/ForkPoolWorker-1]  74%|#######4  | 37/50 [00:07<00:02,  5.17it/s]
[2024-10-31 06:00:34,322: WARNING/ForkPoolWorker-1]  76%|#######6  | 38/50 [00:07<00:02,  5.14it/s]
[2024-10-31 06:00:34,520: WARNING/ForkPoolWorker-1]  78%|#######8  | 39/50 [00:07<00:02,  5.12it/s]
[2024-10-31 06:00:34,714: WARNING/ForkPoolWorker-1]  80%|########  | 40/50 [00:07<00:01,  5.13it/s]
[2024-10-31 06:00:34,909: WARNING/ForkPoolWorker-1]  82%|########2 | 41/50 [00:08<00:01,  5.13it/s]
[2024-10-31 06:00:35,106: WARNING/ForkPoolWorker-1]  84%|########4 | 42/50 [00:08<00:01,  5.11it/s]
[2024-10-31 06:00:35,300: WARNING/ForkPoolWorker-1]  86%|########6 | 43/50 [00:08<00:01,  5.12it/s]
[2024-10-31 06:00:35,493: WARNING/ForkPoolWorker-1]  88%|########8 | 44/50 [00:08<00:01,  5.14it/s]
[2024-10-31 06:00:35,687: WARNING/ForkPoolWorker-1]  90%|######### | 45/50 [00:08<00:00,  5.15it/s]
[2024-10-31 06:00:35,880: WARNING/ForkPoolWorker-1]  92%|#########2| 46/50 [00:09<00:00,  5.15it/s]
[2024-10-31 06:00:36,075: WARNING/ForkPoolWorker-1]  94%|#########3| 47/50 [00:09<00:00,  5.15it/s]
[2024-10-31 06:00:36,270: WARNING/ForkPoolWorker-1]  96%|#########6| 48/50 [00:09<00:00,  5.14it/s]
[2024-10-31 06:00:36,467: WARNING/ForkPoolWorker-1]  98%|#########8| 49/50 [00:09<00:00,  5.13it/s]
[2024-10-31 06:00:36,663: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.11it/s]
[2024-10-31 06:00:36,664: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.06it/s]
[2024-10-31 06:00:36,859: INFO/ForkPoolWorker-1] Task celery_tasks.celery_fill_anything[e40521b9-d162-460a-9455-0fb14bb191bb] succeeded in 11.185974322999982s: ('sharkcute_inpainted.jpg', '197d1f6b-3c73-4920-95ba-8c1fb94d0a89')
[2024-10-31 06:00:53,166: INFO/MainProcess] Task celery_tasks.celery_remove_anything[424afab5-11d9-417b-9e3d-246a44ec9c23] received
[2024-10-31 06:00:54,582: INFO/ForkPoolWorker-1] Task celery_tasks.celery_remove_anything[424afab5-11d9-417b-9e3d-246a44ec9c23] succeeded in 1.4148226940000086s: (['sharkcute_inpainted_1.jpg', 'sharkcute_inpainted_2.jpg', 'sharkcute_inpainted_3.jpg'], '197d1f6b-3c73-4920-95ba-8c1fb94d0a89')
[2024-10-31 06:01:09,051: INFO/MainProcess] Task celery_tasks.celery_fill_anything[4c6a5fe8-aad6-4486-9825-d7277d6153a1] received
[2024-10-31 06:01:10,134: WARNING/ForkPoolWorker-1]   0%|          | 0/50 [00:00<?, ?it/s]
[2024-10-31 06:01:10,592: WARNING/ForkPoolWorker-1]   2%|2         | 1/50 [00:00<00:22,  2.19it/s]
[2024-10-31 06:01:10,773: WARNING/ForkPoolWorker-1]   4%|4         | 2/50 [00:00<00:14,  3.39it/s]
[2024-10-31 06:01:10,956: WARNING/ForkPoolWorker-1]   6%|6         | 3/50 [00:00<00:11,  4.10it/s]
[2024-10-31 06:01:11,154: WARNING/ForkPoolWorker-1]   8%|8         | 4/50 [00:01<00:10,  4.43it/s]
[2024-10-31 06:01:11,340: WARNING/ForkPoolWorker-1]  10%|#         | 5/50 [00:01<00:09,  4.73it/s]
[2024-10-31 06:01:11,523: WARNING/ForkPoolWorker-1]  12%|#2        | 6/50 [00:01<00:08,  4.96it/s]
[2024-10-31 06:01:11,711: WARNING/ForkPoolWorker-1]  14%|#4        | 7/50 [00:01<00:08,  5.07it/s]
[2024-10-31 06:01:11,896: WARNING/ForkPoolWorker-1]  16%|#6        | 8/50 [00:01<00:08,  5.17it/s]
[2024-10-31 06:01:12,093: WARNING/ForkPoolWorker-1]  18%|#8        | 9/50 [00:01<00:07,  5.14it/s]
[2024-10-31 06:01:12,289: WARNING/ForkPoolWorker-1]  20%|##        | 10/50 [00:02<00:07,  5.13it/s]
[2024-10-31 06:01:12,477: WARNING/ForkPoolWorker-1]  22%|##2       | 11/50 [00:02<00:07,  5.18it/s]
[2024-10-31 06:01:12,667: WARNING/ForkPoolWorker-1]  24%|##4       | 12/50 [00:02<00:07,  5.21it/s]
[2024-10-31 06:01:12,854: WARNING/ForkPoolWorker-1]  26%|##6       | 13/50 [00:02<00:07,  5.25it/s]
[2024-10-31 06:01:13,049: WARNING/ForkPoolWorker-1]  28%|##8       | 14/50 [00:02<00:06,  5.21it/s]
[2024-10-31 06:01:13,244: WARNING/ForkPoolWorker-1]  30%|###       | 15/50 [00:03<00:06,  5.19it/s]
[2024-10-31 06:01:13,434: WARNING/ForkPoolWorker-1]  32%|###2      | 16/50 [00:03<00:06,  5.21it/s]
[2024-10-31 06:01:13,625: WARNING/ForkPoolWorker-1]  34%|###4      | 17/50 [00:03<00:06,  5.22it/s]
[2024-10-31 06:01:13,814: WARNING/ForkPoolWorker-1]  36%|###6      | 18/50 [00:03<00:06,  5.24it/s]
[2024-10-31 06:01:14,006: WARNING/ForkPoolWorker-1]  38%|###8      | 19/50 [00:03<00:05,  5.22it/s]
[2024-10-31 06:01:14,196: WARNING/ForkPoolWorker-1]  40%|####      | 20/50 [00:04<00:05,  5.24it/s]
[2024-10-31 06:01:14,392: WARNING/ForkPoolWorker-1]  42%|####2     | 21/50 [00:04<00:05,  5.20it/s]
[2024-10-31 06:01:14,586: WARNING/ForkPoolWorker-1]  44%|####4     | 22/50 [00:04<00:05,  5.19it/s]
[2024-10-31 06:01:14,773: WARNING/ForkPoolWorker-1]  46%|####6     | 23/50 [00:04<00:05,  5.24it/s]
[2024-10-31 06:01:14,965: WARNING/ForkPoolWorker-1]  48%|####8     | 24/50 [00:04<00:04,  5.22it/s]
[2024-10-31 06:01:15,157: WARNING/ForkPoolWorker-1]  50%|#####     | 25/50 [00:05<00:04,  5.22it/s]
[2024-10-31 06:01:15,349: WARNING/ForkPoolWorker-1]  52%|#####2    | 26/50 [00:05<00:04,  5.22it/s]
[2024-10-31 06:01:15,544: WARNING/ForkPoolWorker-1]  54%|#####4    | 27/50 [00:05<00:04,  5.19it/s]
[2024-10-31 06:01:15,732: WARNING/ForkPoolWorker-1]  56%|#####6    | 28/50 [00:05<00:04,  5.23it/s]
[2024-10-31 06:01:15,924: WARNING/ForkPoolWorker-1]  58%|#####8    | 29/50 [00:05<00:04,  5.22it/s]
[2024-10-31 06:01:16,114: WARNING/ForkPoolWorker-1]  60%|######    | 30/50 [00:05<00:03,  5.23it/s]
[2024-10-31 06:01:16,311: WARNING/ForkPoolWorker-1]  62%|######2   | 31/50 [00:06<00:03,  5.19it/s]
[2024-10-31 06:01:16,504: WARNING/ForkPoolWorker-1]  64%|######4   | 32/50 [00:06<00:03,  5.19it/s]
[2024-10-31 06:01:16,692: WARNING/ForkPoolWorker-1]  66%|######6   | 33/50 [00:06<00:03,  5.22it/s]
[2024-10-31 06:01:16,884: WARNING/ForkPoolWorker-1]  68%|######8   | 34/50 [00:06<00:03,  5.22it/s]
[2024-10-31 06:01:17,076: WARNING/ForkPoolWorker-1]  70%|#######   | 35/50 [00:06<00:02,  5.21it/s]
[2024-10-31 06:01:17,272: WARNING/ForkPoolWorker-1]  72%|#######2  | 36/50 [00:07<00:02,  5.18it/s]
[2024-10-31 06:01:17,466: WARNING/ForkPoolWorker-1]  74%|#######4  | 37/50 [00:07<00:02,  5.18it/s]
[2024-10-31 06:01:17,659: WARNING/ForkPoolWorker-1]  76%|#######6  | 38/50 [00:07<00:02,  5.18it/s]
[2024-10-31 06:01:17,851: WARNING/ForkPoolWorker-1]  78%|#######8  | 39/50 [00:07<00:02,  5.19it/s]
[2024-10-31 06:01:18,045: WARNING/ForkPoolWorker-1]  80%|########  | 40/50 [00:07<00:01,  5.18it/s]
[2024-10-31 06:01:18,240: WARNING/ForkPoolWorker-1]  82%|########2 | 41/50 [00:08<00:01,  5.16it/s]
[2024-10-31 06:01:18,432: WARNING/ForkPoolWorker-1]  84%|########4 | 42/50 [00:08<00:01,  5.18it/s]
[2024-10-31 06:01:18,623: WARNING/ForkPoolWorker-1]  86%|########6 | 43/50 [00:08<00:01,  5.19it/s]
[2024-10-31 06:01:18,812: WARNING/ForkPoolWorker-1]  88%|########8 | 44/50 [00:08<00:01,  5.23it/s]
[2024-10-31 06:01:19,003: WARNING/ForkPoolWorker-1]  90%|######### | 45/50 [00:08<00:00,  5.22it/s]
[2024-10-31 06:01:19,194: WARNING/ForkPoolWorker-1]  92%|#########2| 46/50 [00:09<00:00,  5.23it/s]
[2024-10-31 06:01:19,391: WARNING/ForkPoolWorker-1]  94%|#########3| 47/50 [00:09<00:00,  5.18it/s]
[2024-10-31 06:01:19,585: WARNING/ForkPoolWorker-1]  96%|#########6| 48/50 [00:09<00:00,  5.18it/s]
[2024-10-31 06:01:19,776: WARNING/ForkPoolWorker-1]  98%|#########8| 49/50 [00:09<00:00,  5.19it/s]
[2024-10-31 06:01:19,971: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.17it/s]
[2024-10-31 06:01:19,971: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.08it/s]
[2024-10-31 06:01:20,179: INFO/ForkPoolWorker-1] Task celery_tasks.celery_fill_anything[4c6a5fe8-aad6-4486-9825-d7277d6153a1] succeeded in 11.127441174999944s: ('sharkcute_inpainted.jpg', '197d1f6b-3c73-4920-95ba-8c1fb94d0a89')
[2024-10-31 06:01:56,404: INFO/MainProcess] Task celery_tasks.celery_fill_anything[43f726a4-42af-4d1d-bcb2-5a7eacbb27b1] received
[2024-10-31 06:01:57,496: WARNING/ForkPoolWorker-1]   0%|          | 0/50 [00:00<?, ?it/s]
[2024-10-31 06:01:57,961: WARNING/ForkPoolWorker-1]   2%|2         | 1/50 [00:00<00:22,  2.15it/s]
[2024-10-31 06:01:58,146: WARNING/ForkPoolWorker-1]   4%|4         | 2/50 [00:00<00:14,  3.33it/s]
[2024-10-31 06:01:58,330: WARNING/ForkPoolWorker-1]   6%|6         | 3/50 [00:00<00:11,  4.05it/s]
[2024-10-31 06:01:58,527: WARNING/ForkPoolWorker-1]   8%|8         | 4/50 [00:01<00:10,  4.40it/s]
[2024-10-31 06:01:58,716: WARNING/ForkPoolWorker-1]  10%|#         | 5/50 [00:01<00:09,  4.68it/s]
[2024-10-31 06:01:58,904: WARNING/ForkPoolWorker-1]  12%|#2        | 6/50 [00:01<00:09,  4.88it/s]
[2024-10-31 06:01:59,089: WARNING/ForkPoolWorker-1]  14%|#4        | 7/50 [00:01<00:08,  5.05it/s]
[2024-10-31 06:01:59,275: WARNING/ForkPoolWorker-1]  16%|#6        | 8/50 [00:01<00:08,  5.14it/s]
[2024-10-31 06:01:59,469: WARNING/ForkPoolWorker-1]  18%|#8        | 9/50 [00:01<00:07,  5.15it/s]
[2024-10-31 06:01:59,658: WARNING/ForkPoolWorker-1]  20%|##        | 10/50 [00:02<00:07,  5.19it/s]
[2024-10-31 06:01:59,847: WARNING/ForkPoolWorker-1]  22%|##2       | 11/50 [00:02<00:07,  5.22it/s]
[2024-10-31 06:02:00,035: WARNING/ForkPoolWorker-1]  24%|##4       | 12/50 [00:02<00:07,  5.25it/s]
[2024-10-31 06:02:00,220: WARNING/ForkPoolWorker-1]  26%|##6       | 13/50 [00:02<00:06,  5.29it/s]
[2024-10-31 06:02:00,412: WARNING/ForkPoolWorker-1]  28%|##8       | 14/50 [00:02<00:06,  5.27it/s]
[2024-10-31 06:02:00,600: WARNING/ForkPoolWorker-1]  30%|###       | 15/50 [00:03<00:06,  5.28it/s]
[2024-10-31 06:02:00,790: WARNING/ForkPoolWorker-1]  32%|###2      | 16/50 [00:03<00:06,  5.28it/s]
[2024-10-31 06:02:00,977: WARNING/ForkPoolWorker-1]  34%|###4      | 17/50 [00:03<00:06,  5.30it/s]
[2024-10-31 06:02:01,167: WARNING/ForkPoolWorker-1]  36%|###6      | 18/50 [00:03<00:06,  5.29it/s]
[2024-10-31 06:02:01,355: WARNING/ForkPoolWorker-1]  38%|###8      | 19/50 [00:03<00:05,  5.29it/s]
[2024-10-31 06:02:01,545: WARNING/ForkPoolWorker-1]  40%|####      | 20/50 [00:04<00:05,  5.29it/s]
[2024-10-31 06:02:01,733: WARNING/ForkPoolWorker-1]  42%|####2     | 21/50 [00:04<00:05,  5.30it/s]
[2024-10-31 06:02:01,921: WARNING/ForkPoolWorker-1]  44%|####4     | 22/50 [00:04<00:05,  5.30it/s]
[2024-10-31 06:02:02,110: WARNING/ForkPoolWorker-1]  46%|####6     | 23/50 [00:04<00:05,  5.30it/s]
[2024-10-31 06:02:02,297: WARNING/ForkPoolWorker-1]  48%|####8     | 24/50 [00:04<00:04,  5.31it/s]
[2024-10-31 06:02:02,488: WARNING/ForkPoolWorker-1]  50%|#####     | 25/50 [00:04<00:04,  5.29it/s]
[2024-10-31 06:02:02,675: WARNING/ForkPoolWorker-1]  52%|#####2    | 26/50 [00:05<00:04,  5.31it/s]
[2024-10-31 06:02:02,864: WARNING/ForkPoolWorker-1]  54%|#####4    | 27/50 [00:05<00:04,  5.30it/s]
[2024-10-31 06:02:03,054: WARNING/ForkPoolWorker-1]  56%|#####6    | 28/50 [00:05<00:04,  5.29it/s]
[2024-10-31 06:02:03,246: WARNING/ForkPoolWorker-1]  58%|#####8    | 29/50 [00:05<00:03,  5.27it/s]
[2024-10-31 06:02:03,436: WARNING/ForkPoolWorker-1]  60%|######    | 30/50 [00:05<00:03,  5.27it/s]
[2024-10-31 06:02:03,627: WARNING/ForkPoolWorker-1]  62%|######2   | 31/50 [00:06<00:03,  5.26it/s]
[2024-10-31 06:02:03,817: WARNING/ForkPoolWorker-1]  64%|######4   | 32/50 [00:06<00:03,  5.25it/s]
[2024-10-31 06:02:04,009: WARNING/ForkPoolWorker-1]  66%|######6   | 33/50 [00:06<00:03,  5.24it/s]
[2024-10-31 06:02:04,202: WARNING/ForkPoolWorker-1]  68%|######8   | 34/50 [00:06<00:03,  5.23it/s]
[2024-10-31 06:02:04,397: WARNING/ForkPoolWorker-1]  70%|#######   | 35/50 [00:06<00:02,  5.19it/s]
[2024-10-31 06:02:04,591: WARNING/ForkPoolWorker-1]  72%|#######2  | 36/50 [00:07<00:02,  5.18it/s]
[2024-10-31 06:02:04,785: WARNING/ForkPoolWorker-1]  74%|#######4  | 37/50 [00:07<00:02,  5.17it/s]
[2024-10-31 06:02:04,977: WARNING/ForkPoolWorker-1]  76%|#######6  | 38/50 [00:07<00:02,  5.19it/s]
[2024-10-31 06:02:05,170: WARNING/ForkPoolWorker-1]  78%|#######8  | 39/50 [00:07<00:02,  5.19it/s]
[2024-10-31 06:02:05,360: WARNING/ForkPoolWorker-1]  80%|########  | 40/50 [00:07<00:01,  5.21it/s]
[2024-10-31 06:02:05,556: WARNING/ForkPoolWorker-1]  82%|########2 | 41/50 [00:08<00:01,  5.18it/s]
[2024-10-31 06:02:05,752: WARNING/ForkPoolWorker-1]  84%|########4 | 42/50 [00:08<00:01,  5.15it/s]
[2024-10-31 06:02:05,947: WARNING/ForkPoolWorker-1]  86%|########6 | 43/50 [00:08<00:01,  5.15it/s]
[2024-10-31 06:02:06,141: WARNING/ForkPoolWorker-1]  88%|########8 | 44/50 [00:08<00:01,  5.14it/s]
[2024-10-31 06:02:06,335: WARNING/ForkPoolWorker-1]  90%|######### | 45/50 [00:08<00:00,  5.15it/s]
[2024-10-31 06:02:06,532: WARNING/ForkPoolWorker-1]  92%|#########2| 46/50 [00:09<00:00,  5.13it/s]
[2024-10-31 06:02:06,727: WARNING/ForkPoolWorker-1]  94%|#########3| 47/50 [00:09<00:00,  5.13it/s]
[2024-10-31 06:02:06,920: WARNING/ForkPoolWorker-1]  96%|#########6| 48/50 [00:09<00:00,  5.14it/s]
[2024-10-31 06:02:07,115: WARNING/ForkPoolWorker-1]  98%|#########8| 49/50 [00:09<00:00,  5.14it/s]
[2024-10-31 06:02:07,311: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.13it/s]
[2024-10-31 06:02:07,312: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.09it/s]
[2024-10-31 06:02:07,522: INFO/ForkPoolWorker-1] Task celery_tasks.celery_fill_anything[43f726a4-42af-4d1d-bcb2-5a7eacbb27b1] succeeded in 11.117450598999994s: ('sharkcute_inpainted.jpg', '197d1f6b-3c73-4920-95ba-8c1fb94d0a89')
[2024-10-31 06:02:38,948: INFO/MainProcess] Task celery_tasks.celery_fill_anything[91d6d7e9-62b4-47d3-ba52-3bf3e8bf1e4e] received
[2024-10-31 06:02:39,368: INFO/MainProcess] Task celery_tasks.celery_fill_anything[48b489a2-3379-4e0c-aee7-fb46ccc33390] received
[2024-10-31 06:02:40,120: WARNING/ForkPoolWorker-1]   0%|          | 0/50 [00:00<?, ?it/s]
[2024-10-31 06:02:40,588: WARNING/ForkPoolWorker-1]   2%|2         | 1/50 [00:00<00:22,  2.14it/s]
[2024-10-31 06:02:40,772: WARNING/ForkPoolWorker-1]   4%|4         | 2/50 [00:00<00:14,  3.32it/s]
[2024-10-31 06:02:40,960: WARNING/ForkPoolWorker-1]   6%|6         | 3/50 [00:00<00:11,  4.01it/s]
[2024-10-31 06:02:41,160: WARNING/ForkPoolWorker-1]   8%|8         | 4/50 [00:01<00:10,  4.35it/s]
[2024-10-31 06:02:41,353: WARNING/ForkPoolWorker-1]  10%|#         | 5/50 [00:01<00:09,  4.62it/s]
[2024-10-31 06:02:41,543: WARNING/ForkPoolWorker-1]  12%|#2        | 6/50 [00:01<00:09,  4.82it/s]
[2024-10-31 06:02:41,729: WARNING/ForkPoolWorker-1]  14%|#4        | 7/50 [00:01<00:08,  4.99it/s]
[2024-10-31 06:02:41,917: WARNING/ForkPoolWorker-1]  16%|#6        | 8/50 [00:01<00:08,  5.09it/s]
[2024-10-31 06:02:42,112: WARNING/ForkPoolWorker-1]  18%|#8        | 9/50 [00:01<00:08,  5.10it/s]
[2024-10-31 06:02:42,309: WARNING/ForkPoolWorker-1]  20%|##        | 10/50 [00:02<00:07,  5.10it/s]
[2024-10-31 06:02:42,501: WARNING/ForkPoolWorker-1]  22%|##2       | 11/50 [00:02<00:07,  5.13it/s]
[2024-10-31 06:02:42,691: WARNING/ForkPoolWorker-1]  24%|##4       | 12/50 [00:02<00:07,  5.17it/s]
[2024-10-31 06:02:42,878: WARNING/ForkPoolWorker-1]  26%|##6       | 13/50 [00:02<00:07,  5.22it/s]
[2024-10-31 06:02:43,068: WARNING/ForkPoolWorker-1]  28%|##8       | 14/50 [00:02<00:06,  5.23it/s]
[2024-10-31 06:02:43,265: WARNING/ForkPoolWorker-1]  30%|###       | 15/50 [00:03<00:06,  5.19it/s]
[2024-10-31 06:02:43,459: WARNING/ForkPoolWorker-1]  32%|###2      | 16/50 [00:03<00:06,  5.18it/s]
[2024-10-31 06:02:43,647: WARNING/ForkPoolWorker-1]  34%|###4      | 17/50 [00:03<00:06,  5.22it/s]
[2024-10-31 06:02:43,838: WARNING/ForkPoolWorker-1]  36%|###6      | 18/50 [00:03<00:06,  5.22it/s]
[2024-10-31 06:02:44,031: WARNING/ForkPoolWorker-1]  38%|###8      | 19/50 [00:03<00:05,  5.21it/s]
[2024-10-31 06:02:44,227: WARNING/ForkPoolWorker-1]  40%|####      | 20/50 [00:04<00:05,  5.18it/s]
[2024-10-31 06:02:44,422: WARNING/ForkPoolWorker-1]  42%|####2     | 21/50 [00:04<00:05,  5.16it/s]
[2024-10-31 06:02:44,615: WARNING/ForkPoolWorker-1]  44%|####4     | 22/50 [00:04<00:05,  5.17it/s]
[2024-10-31 06:02:44,802: WARNING/ForkPoolWorker-1]  46%|####6     | 23/50 [00:04<00:05,  5.22it/s]
[2024-10-31 06:02:44,996: WARNING/ForkPoolWorker-1]  48%|####8     | 24/50 [00:04<00:04,  5.20it/s]
[2024-10-31 06:02:45,191: WARNING/ForkPoolWorker-1]  50%|#####     | 25/50 [00:05<00:04,  5.18it/s]
[2024-10-31 06:02:45,384: WARNING/ForkPoolWorker-1]  52%|#####2    | 26/50 [00:05<00:04,  5.18it/s]
[2024-10-31 06:02:45,577: WARNING/ForkPoolWorker-1]  54%|#####4    | 27/50 [00:05<00:04,  5.18it/s]
[2024-10-31 06:02:45,769: WARNING/ForkPoolWorker-1]  56%|#####6    | 28/50 [00:05<00:04,  5.19it/s]
[2024-10-31 06:02:45,962: WARNING/ForkPoolWorker-1]  58%|#####8    | 29/50 [00:05<00:04,  5.19it/s]
[2024-10-31 06:02:46,157: WARNING/ForkPoolWorker-1]  60%|######    | 30/50 [00:06<00:03,  5.17it/s]
[2024-10-31 06:02:46,353: WARNING/ForkPoolWorker-1]  62%|######2   | 31/50 [00:06<00:03,  5.15it/s]
[2024-10-31 06:02:46,547: WARNING/ForkPoolWorker-1]  64%|######4   | 32/50 [00:06<00:03,  5.15it/s]
[2024-10-31 06:02:46,742: WARNING/ForkPoolWorker-1]  66%|######6   | 33/50 [00:06<00:03,  5.15it/s]
[2024-10-31 06:02:46,935: WARNING/ForkPoolWorker-1]  68%|######8   | 34/50 [00:06<00:03,  5.16it/s]
[2024-10-31 06:02:47,127: WARNING/ForkPoolWorker-1]  70%|#######   | 35/50 [00:07<00:02,  5.17it/s]
[2024-10-31 06:02:47,324: WARNING/ForkPoolWorker-1]  72%|#######2  | 36/50 [00:07<00:02,  5.14it/s]
[2024-10-31 06:02:47,519: WARNING/ForkPoolWorker-1]  74%|#######4  | 37/50 [00:07<00:02,  5.14it/s]
[2024-10-31 06:02:47,712: WARNING/ForkPoolWorker-1]  76%|#######6  | 38/50 [00:07<00:02,  5.15it/s]
[2024-10-31 06:02:47,904: WARNING/ForkPoolWorker-1]  78%|#######8  | 39/50 [00:07<00:02,  5.16it/s]
[2024-10-31 06:02:48,101: WARNING/ForkPoolWorker-1]  80%|########  | 40/50 [00:07<00:01,  5.14it/s]
[2024-10-31 06:02:48,297: WARNING/ForkPoolWorker-1]  82%|########2 | 41/50 [00:08<00:01,  5.13it/s]
[2024-10-31 06:02:48,493: WARNING/ForkPoolWorker-1]  84%|########4 | 42/50 [00:08<00:01,  5.12it/s]
[2024-10-31 06:02:48,683: WARNING/ForkPoolWorker-1]  86%|########6 | 43/50 [00:08<00:01,  5.16it/s]
[2024-10-31 06:02:48,877: WARNING/ForkPoolWorker-1]  88%|########8 | 44/50 [00:08<00:01,  5.16it/s]
[2024-10-31 06:02:49,074: WARNING/ForkPoolWorker-1]  90%|######### | 45/50 [00:08<00:00,  5.14it/s]
[2024-10-31 06:02:49,271: WARNING/ForkPoolWorker-1]  92%|#########2| 46/50 [00:09<00:00,  5.12it/s]
[2024-10-31 06:02:49,465: WARNING/ForkPoolWorker-1]  94%|#########3| 47/50 [00:09<00:00,  5.13it/s]
[2024-10-31 06:02:49,661: WARNING/ForkPoolWorker-1]  96%|#########6| 48/50 [00:09<00:00,  5.12it/s]
[2024-10-31 06:02:49,852: WARNING/ForkPoolWorker-1]  98%|#########8| 49/50 [00:09<00:00,  5.15it/s]
[2024-10-31 06:02:50,042: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.18it/s]
[2024-10-31 06:02:50,043: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.04it/s]
[2024-10-31 06:02:50,606: INFO/ForkPoolWorker-1] Task celery_tasks.celery_fill_anything[91d6d7e9-62b4-47d3-ba52-3bf3e8bf1e4e] succeeded in 11.65682498199999s: ('original_inpainted.png', 'dc501fcb-2723-4328-8f46-09d780809763')
[2024-10-31 06:02:51,723: WARNING/ForkPoolWorker-1]   0%|          | 0/50 [00:00<?, ?it/s]
[2024-10-31 06:02:52,193: WARNING/ForkPoolWorker-1]   2%|2         | 1/50 [00:00<00:22,  2.13it/s]
[2024-10-31 06:02:52,379: WARNING/ForkPoolWorker-1]   4%|4         | 2/50 [00:00<00:14,  3.30it/s]
[2024-10-31 06:02:52,574: WARNING/ForkPoolWorker-1]   6%|6         | 3/50 [00:00<00:11,  3.95it/s]
[2024-10-31 06:02:52,773: WARNING/ForkPoolWorker-1]   8%|8         | 4/50 [00:01<00:10,  4.31it/s]
[2024-10-31 06:02:52,961: WARNING/ForkPoolWorker-1]  10%|#         | 5/50 [00:01<00:09,  4.63it/s]
[2024-10-31 06:02:53,150: WARNING/ForkPoolWorker-1]  12%|#2        | 6/50 [00:01<00:09,  4.83it/s]
[2024-10-31 06:02:53,339: WARNING/ForkPoolWorker-1]  14%|#4        | 7/50 [00:01<00:08,  4.97it/s]
[2024-10-31 06:02:53,532: WARNING/ForkPoolWorker-1]  16%|#6        | 8/50 [00:01<00:08,  5.04it/s]
[2024-10-31 06:02:53,730: WARNING/ForkPoolWorker-1]  18%|#8        | 9/50 [00:02<00:08,  5.04it/s]
[2024-10-31 06:02:53,921: WARNING/ForkPoolWorker-1]  20%|##        | 10/50 [00:02<00:07,  5.10it/s]
[2024-10-31 06:02:54,111: WARNING/ForkPoolWorker-1]  22%|##2       | 11/50 [00:02<00:07,  5.15it/s]
[2024-10-31 06:02:54,300: WARNING/ForkPoolWorker-1]  24%|##4       | 12/50 [00:02<00:07,  5.19it/s]
[2024-10-31 06:02:54,493: WARNING/ForkPoolWorker-1]  26%|##6       | 13/50 [00:02<00:07,  5.19it/s]
[2024-10-31 06:02:54,685: WARNING/ForkPoolWorker-1]  28%|##8       | 14/50 [00:02<00:06,  5.20it/s]
[2024-10-31 06:02:54,883: WARNING/ForkPoolWorker-1]  30%|###       | 15/50 [00:03<00:06,  5.15it/s]
[2024-10-31 06:02:55,078: WARNING/ForkPoolWorker-1]  32%|###2      | 16/50 [00:03<00:06,  5.14it/s]
[2024-10-31 06:02:55,273: WARNING/ForkPoolWorker-1]  34%|###4      | 17/50 [00:03<00:06,  5.14it/s]
[2024-10-31 06:02:55,463: WARNING/ForkPoolWorker-1]  36%|###6      | 18/50 [00:03<00:06,  5.18it/s]
[2024-10-31 06:02:55,658: WARNING/ForkPoolWorker-1]  38%|###8      | 19/50 [00:03<00:06,  5.16it/s]
[2024-10-31 06:02:55,854: WARNING/ForkPoolWorker-1]  40%|####      | 20/50 [00:04<00:05,  5.14it/s]
[2024-10-31 06:02:56,050: WARNING/ForkPoolWorker-1]  42%|####2     | 21/50 [00:04<00:05,  5.13it/s]
[2024-10-31 06:02:56,241: WARNING/ForkPoolWorker-1]  44%|####4     | 22/50 [00:04<00:05,  5.16it/s]
[2024-10-31 06:02:56,439: WARNING/ForkPoolWorker-1]  46%|####6     | 23/50 [00:04<00:05,  5.13it/s]
[2024-10-31 06:02:56,632: WARNING/ForkPoolWorker-1]  48%|####8     | 24/50 [00:04<00:05,  5.15it/s]
[2024-10-31 06:02:56,827: WARNING/ForkPoolWorker-1]  50%|#####     | 25/50 [00:05<00:04,  5.14it/s]
[2024-10-31 06:02:57,020: WARNING/ForkPoolWorker-1]  52%|#####2    | 26/50 [00:05<00:04,  5.15it/s]
[2024-10-31 06:02:57,218: WARNING/ForkPoolWorker-1]  54%|#####4    | 27/50 [00:05<00:04,  5.12it/s]
[2024-10-31 06:02:57,413: WARNING/ForkPoolWorker-1]  56%|#####6    | 28/50 [00:05<00:04,  5.13it/s]
[2024-10-31 06:02:57,605: WARNING/ForkPoolWorker-1]  58%|#####8    | 29/50 [00:05<00:04,  5.15it/s]
[2024-10-31 06:02:57,798: WARNING/ForkPoolWorker-1]  60%|######    | 30/50 [00:06<00:03,  5.15it/s]
[2024-10-31 06:02:57,992: WARNING/ForkPoolWorker-1]  62%|######2   | 31/50 [00:06<00:03,  5.16it/s]
[2024-10-31 06:02:58,184: WARNING/ForkPoolWorker-1]  64%|######4   | 32/50 [00:06<00:03,  5.17it/s]
[2024-10-31 06:02:58,380: WARNING/ForkPoolWorker-1]  66%|######6   | 33/50 [00:06<00:03,  5.15it/s]
[2024-10-31 06:02:58,577: WARNING/ForkPoolWorker-1]  68%|######8   | 34/50 [00:06<00:03,  5.13it/s]
[2024-10-31 06:02:58,771: WARNING/ForkPoolWorker-1]  70%|#######   | 35/50 [00:07<00:02,  5.14it/s]
[2024-10-31 06:02:58,961: WARNING/ForkPoolWorker-1]  72%|#######2  | 36/50 [00:07<00:02,  5.17it/s]
[2024-10-31 06:02:59,158: WARNING/ForkPoolWorker-1]  74%|#######4  | 37/50 [00:07<00:02,  5.15it/s]
[2024-10-31 06:02:59,352: WARNING/ForkPoolWorker-1]  76%|#######6  | 38/50 [00:07<00:02,  5.15it/s]
[2024-10-31 06:02:59,544: WARNING/ForkPoolWorker-1]  78%|#######8  | 39/50 [00:07<00:02,  5.16it/s]
[2024-10-31 06:02:59,738: WARNING/ForkPoolWorker-1]  80%|########  | 40/50 [00:08<00:01,  5.16it/s]
[2024-10-31 06:02:59,933: WARNING/ForkPoolWorker-1]  82%|########2 | 41/50 [00:08<00:01,  5.16it/s]
[2024-10-31 06:03:00,129: WARNING/ForkPoolWorker-1]  84%|########4 | 42/50 [00:08<00:01,  5.14it/s]
[2024-10-31 06:03:00,320: WARNING/ForkPoolWorker-1]  86%|########6 | 43/50 [00:08<00:01,  5.17it/s]
[2024-10-31 06:03:00,518: WARNING/ForkPoolWorker-1]  88%|########8 | 44/50 [00:08<00:01,  5.13it/s]
[2024-10-31 06:03:00,713: WARNING/ForkPoolWorker-1]  90%|######### | 45/50 [00:08<00:00,  5.13it/s]
[2024-10-31 06:03:00,908: WARNING/ForkPoolWorker-1]  92%|#########2| 46/50 [00:09<00:00,  5.13it/s]
[2024-10-31 06:03:01,099: WARNING/ForkPoolWorker-1]  94%|#########3| 47/50 [00:09<00:00,  5.16it/s]
[2024-10-31 06:03:01,295: WARNING/ForkPoolWorker-1]  96%|#########6| 48/50 [00:09<00:00,  5.14it/s]
[2024-10-31 06:03:01,491: WARNING/ForkPoolWorker-1]  98%|#########8| 49/50 [00:09<00:00,  5.13it/s]
[2024-10-31 06:03:01,683: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.15it/s]
[2024-10-31 06:03:01,683: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.02it/s]
[2024-10-31 06:03:01,893: INFO/ForkPoolWorker-1] Task celery_tasks.celery_fill_anything[48b489a2-3379-4e0c-aee7-fb46ccc33390] succeeded in 11.286741320999909s: ('sharkcute_inpainted.jpg', '197d1f6b-3c73-4920-95ba-8c1fb94d0a89')
[2024-10-31 06:03:26,629: INFO/MainProcess] Task celery_tasks.celery_replace_anything[9b8df3ba-09fd-4b4e-a668-0ab11f27c154] received
[2024-10-31 06:03:27,703: WARNING/ForkPoolWorker-1]   0%|          | 0/50 [00:00<?, ?it/s]
[2024-10-31 06:03:28,170: WARNING/ForkPoolWorker-1]   2%|2         | 1/50 [00:00<00:22,  2.14it/s]
[2024-10-31 06:03:28,355: WARNING/ForkPoolWorker-1]   4%|4         | 2/50 [00:00<00:14,  3.33it/s]
[2024-10-31 06:03:28,538: WARNING/ForkPoolWorker-1]   6%|6         | 3/50 [00:00<00:11,  4.05it/s]
[2024-10-31 06:03:28,732: WARNING/ForkPoolWorker-1]   8%|8         | 4/50 [00:01<00:10,  4.42it/s]
[2024-10-31 06:03:28,923: WARNING/ForkPoolWorker-1]  10%|#         | 5/50 [00:01<00:09,  4.68it/s]
[2024-10-31 06:03:29,110: WARNING/ForkPoolWorker-1]  12%|#2        | 6/50 [00:01<00:09,  4.89it/s]
[2024-10-31 06:03:29,297: WARNING/ForkPoolWorker-1]  14%|#4        | 7/50 [00:01<00:08,  5.03it/s]

Restarting celery worker (/home/truongminhphuong4/venv/bin/celery -A celery_config worker --loglevel=info --concurrency=1)
[2024-10-31 06:03:29,480: WARNING/ForkPoolWorker-1]  14%|#4        | 7/50 [00:01<00:10,  3.94it/s]
[2024-10-31 06:03:29,985: ERROR/MainProcess] Process 'ForkPoolWorker-1' pid:1119 exited with 'exitcode 70'
[2024-10-31 06:03:30,003: ERROR/MainProcess] Task handler raised error: WorkerLostError('Worker exited prematurely: exitcode 70 Job: 20.')
Traceback (most recent call last):
  File "/home/truongminhphuong4/venv/lib/python3.11/site-packages/billiard/pool.py", line 1265, in mark_as_worker_lost
    raise WorkerLostError(
billiard.einfo.ExceptionWithTraceback: 
"""
Traceback (most recent call last):
  File "/home/truongminhphuong4/venv/lib/python3.11/site-packages/celery/worker/worker.py", line 202, in start
    self.blueprint.start(self)
  File "/home/truongminhphuong4/venv/lib/python3.11/site-packages/celery/bootsteps.py", line 116, in start
    step.start(parent)
  File "/home/truongminhphuong4/venv/lib/python3.11/site-packages/celery/bootsteps.py", line 365, in start
    return self.obj.start()
           ^^^^^^^^^^^^^^^^
  File "/home/truongminhphuong4/venv/lib/python3.11/site-packages/celery/worker/consumer/consumer.py", line 340, in start
    blueprint.start(self)
  File "/home/truongminhphuong4/venv/lib/python3.11/site-packages/celery/bootsteps.py", line 116, in start
    step.start(parent)
  File "/home/truongminhphuong4/venv/lib/python3.11/site-packages/celery/worker/consumer/consumer.py", line 746, in start
    c.loop(*c.loop_args())
  File "/home/truongminhphuong4/venv/lib/python3.11/site-packages/celery/worker/loops.py", line 86, in asynloop
    state.maybe_shutdown()
  File "/home/truongminhphuong4/venv/lib/python3.11/site-packages/celery/worker/state.py", line 93, in maybe_shutdown
    raise WorkerShutdown(should_stop)
celery.exceptions.WorkerShutdown: 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/truongminhphuong4/venv/lib/python3.11/site-packages/billiard/pool.py", line 1265, in mark_as_worker_lost
    raise WorkerLostError(
billiard.exceptions.WorkerLostError: Worker exited prematurely: exitcode 70 Job: 20.
"""
2024-10-31 06:03:33.397694: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-10-31 06:03:33.402493: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-10-31 06:03:33.413607: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
2024-10-31 06:03:33.431695: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
2024-10-31 06:03:33.437071: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
2024-10-31 06:03:33.450188: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-10-31 06:03:34.463220: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
Detectron v2 is not installed
 
 -------------- celery@dap391-instance v5.4.0 (opalescent)
--- ***** ----- 
-- ******* ---- Linux-6.1.0-26-cloud-amd64-x86_64-with-glibc2.36 2024-10-31 06:03:36
- *** --- * --- 
- ** ---------- [config]
- ** ---------- .> app:         myapp:0x7fb1ce08f550
- ** ---------- .> transport:   redis://localhost:6379/0
- ** ---------- .> results:     redis://localhost:6379/0
- *** --- * --- .> concurrency: 1 (prefork)
-- ******* ---- .> task events: OFF (enable -E to monitor tasks in this worker)
--- ***** ----- 
 -------------- [queues]
                .> celery           exchange=celery(direct) key=celery
                

[tasks]
  . celery_tasks.celery_fill_anything
  . celery_tasks.celery_remove_anything
  . celery_tasks.celery_replace_anything
  . celery_tasks.load_model

[2024-10-31 06:03:37,024: INFO/MainProcess] Connected to redis://localhost:6379/0
[2024-10-31 06:03:37,030: INFO/MainProcess] mingle: searching for neighbors
[2024-10-31 06:03:38,037: INFO/MainProcess] mingle: all alone
[2024-10-31 06:03:38,046: INFO/MainProcess] celery@dap391-instance ready.
[2024-10-31 06:03:56,757: INFO/MainProcess] Task celery_tasks.load_model[48821152-6b56-41d4-b5e3-8f59bc19000c] received
[2024-10-31 06:04:01,357: WARNING/ForkPoolWorker-1] /home/truongminhphuong4/venv/lib/python3.11/site-packages/segment_anything/build_sam.py:105: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(f)

[2024-10-31 06:04:03,760: WARNING/ForkPoolWorker-1] ----- Load SAM done -----
[2024-10-31 06:04:04,232: WARNING/ForkPoolWorker-1] Loading pipeline components...:   0%|          | 0/6 [00:00<?, ?it/s]
[2024-10-31 06:04:04,356: WARNING/ForkPoolWorker-1] Loading pipeline components...:  50%|#####     | 3/6 [00:00<00:00, 24.29it/s]
[2024-10-31 06:04:05,026: WARNING/ForkPoolWorker-1] Loading pipeline components...: 100%|##########| 6/6 [00:00<00:00,  6.74it/s]
[2024-10-31 06:04:05,027: WARNING/ForkPoolWorker-1] Loading pipeline components...: 100%|##########| 6/6 [00:00<00:00,  7.55it/s]
[2024-10-31 06:04:06,831: WARNING/ForkPoolWorker-1] ----- Load Stable Diffusion done -----
[2024-10-31 06:04:06,857: INFO/ForkPoolWorker-1] Make training model default
[2024-10-31 06:04:06,857: INFO/ForkPoolWorker-1] BaseInpaintingTrainingModule init called
[2024-10-31 06:04:06,858: INFO/ForkPoolWorker-1] Make generator ffc_resnet
[2024-10-31 06:04:07,319: INFO/ForkPoolWorker-1] Generator
FFCResNetGenerator(
  (model): Sequential(
    (0): ReflectionPad2d((3, 3, 3, 3))
    (1): FFC_BN_ACT(
      (ffc): FFC(
        (convl2l): Conv2d(4, 64, kernel_size=(7, 7), stride=(1, 1), bias=False, padding_mode=reflect)
        (convl2g): Identity()
        (convg2l): Identity()
        (convg2g): Identity()
        (gate): Identity()
      )
      (bn_l): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (bn_g): Identity()
      (act_l): ReLU(inplace=True)
      (act_g): Identity()
    )
    (2): FFC_BN_ACT(
      (ffc): FFC(
        (convl2l): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False, padding_mode=reflect)
        (convl2g): Identity()
        (convg2l): Identity()
        (convg2g): Identity()
        (gate): Identity()
      )
      (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (bn_g): Identity()
      (act_l): ReLU(inplace=True)
      (act_g): Identity()
    )
    (3): FFC_BN_ACT(
      (ffc): FFC(
        (convl2l): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False, padding_mode=reflect)
        (convl2g): Identity()
        (convg2l): Identity()
        (convg2g): Identity()
        (gate): Identity()
      )
      (bn_l): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (bn_g): Identity()
      (act_l): ReLU(inplace=True)
      (act_g): Identity()
    )
    (4): FFC_BN_ACT(
      (ffc): FFC(
        (convl2l): Conv2d(256, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False, padding_mode=reflect)
        (convl2g): Conv2d(256, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False, padding_mode=reflect)
        (convg2l): Identity()
        (convg2g): Identity()
        (gate): Identity()
      )
      (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (act_l): ReLU(inplace=True)
      (act_g): ReLU(inplace=True)
    )
    (5): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (6): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (7): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (8): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (9): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (10): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (11): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (12): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (13): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (14): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (15): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (16): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (17): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (18): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (19): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (20): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (21): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (22): FFCResnetBlock(
      (conv1): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
      (conv2): FFC_BN_ACT(
        (ffc): FFC(
          (convl2l): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convl2g): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2l): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False, padding_mode=reflect)
          (convg2g): SpectralTransform(
            (downsample): Identity()
            (conv1): Sequential(
              (0): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (fu): FourierUnit(
              (conv_layer): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (conv2): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (gate): Identity()
        )
        (bn_l): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (bn_g): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act_l): ReLU(inplace=True)
        (act_g): ReLU(inplace=True)
      )
    )
    (23): ConcatTupleLayer()
    (24): ConvTranspose2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
    (25): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (26): ReLU(inplace=True)
    (27): ConvTranspose2d(256, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
    (28): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (29): ReLU(inplace=True)
    (30): ConvTranspose2d(128, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
    (31): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (32): ReLU(inplace=True)
    (33): ReflectionPad2d((3, 3, 3, 3))
    (34): Conv2d(64, 3, kernel_size=(7, 7), stride=(1, 1))
    (35): Sigmoid()
  )
)
[2024-10-31 06:04:07,319: INFO/ForkPoolWorker-1] BaseInpaintingTrainingModule init done
[2024-10-31 06:04:07,320: WARNING/ForkPoolWorker-1] /home/truongminhphuong4/server2/inpaint/lama/saicinpainting/training/trainers/__init__.py:27: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state = torch.load(path, map_location=map_location)

[2024-10-31 06:04:07,794: WARNING/ForkPoolWorker-1] ----- Load LaMa done -----
[2024-10-31 06:04:07,795: WARNING/ForkPoolWorker-1] LOAD MODEL DONE!
[2024-10-31 06:04:07,796: INFO/ForkPoolWorker-1] Task celery_tasks.load_model[48821152-6b56-41d4-b5e3-8f59bc19000c] succeeded in 11.038024500999995s: None
[2024-10-31 06:04:10,042: INFO/MainProcess] Task celery_tasks.celery_remove_anything[b31f08e6-1b29-44df-a6c3-0c47e328dca5] received
[2024-10-31 06:04:11,701: INFO/ForkPoolWorker-1] Task celery_tasks.celery_remove_anything[b31f08e6-1b29-44df-a6c3-0c47e328dca5] succeeded in 1.6585924340000702s: (['sharkcute_inpainted_1.jpg', 'sharkcute_inpainted_2.jpg', 'sharkcute_inpainted_3.jpg'], '7e587d6d-88ca-4e50-bc58-93a0eedf2889')
[2024-10-31 06:04:26,471: INFO/MainProcess] Task celery_tasks.celery_replace_anything[a3fbe941-847e-4452-a991-75ff47266546] received
[2024-10-31 06:04:27,658: WARNING/ForkPoolWorker-1]   0%|          | 0/50 [00:00<?, ?it/s]
[2024-10-31 06:04:28,028: WARNING/ForkPoolWorker-1]   2%|2         | 1/50 [00:00<00:18,  2.70it/s]
[2024-10-31 06:04:28,212: WARNING/ForkPoolWorker-1]   4%|4         | 2/50 [00:00<00:12,  3.84it/s]
[2024-10-31 06:04:28,399: WARNING/ForkPoolWorker-1]   6%|6         | 3/50 [00:00<00:10,  4.40it/s]
[2024-10-31 06:04:28,597: WARNING/ForkPoolWorker-1]   8%|8         | 4/50 [00:00<00:09,  4.64it/s]
[2024-10-31 06:04:28,784: WARNING/ForkPoolWorker-1]  10%|#         | 5/50 [00:01<00:09,  4.87it/s]
[2024-10-31 06:04:28,968: WARNING/ForkPoolWorker-1]  12%|#2        | 6/50 [00:01<00:08,  5.05it/s]
[2024-10-31 06:04:29,154: WARNING/ForkPoolWorker-1]  14%|#4        | 7/50 [00:01<00:08,  5.15it/s]
[2024-10-31 06:04:29,338: WARNING/ForkPoolWorker-1]  16%|#6        | 8/50 [00:01<00:08,  5.24it/s]
[2024-10-31 06:04:29,531: WARNING/ForkPoolWorker-1]  18%|#8        | 9/50 [00:01<00:07,  5.22it/s]
[2024-10-31 06:04:29,725: WARNING/ForkPoolWorker-1]  20%|##        | 10/50 [00:02<00:07,  5.20it/s]
[2024-10-31 06:04:29,917: WARNING/ForkPoolWorker-1]  22%|##2       | 11/50 [00:02<00:07,  5.20it/s]
[2024-10-31 06:04:30,103: WARNING/ForkPoolWorker-1]  24%|##4       | 12/50 [00:02<00:07,  5.26it/s]
[2024-10-31 06:04:30,286: WARNING/ForkPoolWorker-1]  26%|##6       | 13/50 [00:02<00:06,  5.31it/s]
[2024-10-31 06:04:30,480: WARNING/ForkPoolWorker-1]  28%|##8       | 14/50 [00:02<00:06,  5.27it/s]
[2024-10-31 06:04:30,672: WARNING/ForkPoolWorker-1]  30%|###       | 15/50 [00:03<00:06,  5.25it/s]
[2024-10-31 06:04:30,862: WARNING/ForkPoolWorker-1]  32%|###2      | 16/50 [00:03<00:06,  5.25it/s]
[2024-10-31 06:04:31,049: WARNING/ForkPoolWorker-1]  34%|###4      | 17/50 [00:03<00:06,  5.28it/s]
[2024-10-31 06:04:31,234: WARNING/ForkPoolWorker-1]  36%|###6      | 18/50 [00:03<00:06,  5.32it/s]
[2024-10-31 06:04:31,423: WARNING/ForkPoolWorker-1]  38%|###8      | 19/50 [00:03<00:05,  5.32it/s]
[2024-10-31 06:04:31,613: WARNING/ForkPoolWorker-1]  40%|####      | 20/50 [00:03<00:05,  5.29it/s]
[2024-10-31 06:04:31,804: WARNING/ForkPoolWorker-1]  42%|####2     | 21/50 [00:04<00:05,  5.28it/s]
[2024-10-31 06:04:31,995: WARNING/ForkPoolWorker-1]  44%|####4     | 22/50 [00:04<00:05,  5.27it/s]
[2024-10-31 06:04:32,181: WARNING/ForkPoolWorker-1]  46%|####6     | 23/50 [00:04<00:05,  5.29it/s]
[2024-10-31 06:04:32,367: WARNING/ForkPoolWorker-1]  48%|####8     | 24/50 [00:04<00:04,  5.32it/s]
[2024-10-31 06:04:32,561: WARNING/ForkPoolWorker-1]  50%|#####     | 25/50 [00:04<00:04,  5.27it/s]
[2024-10-31 06:04:32,750: WARNING/ForkPoolWorker-1]  52%|#####2    | 26/50 [00:05<00:04,  5.27it/s]
[2024-10-31 06:04:32,942: WARNING/ForkPoolWorker-1]  54%|#####4    | 27/50 [00:05<00:04,  5.26it/s]
[2024-10-31 06:04:33,128: WARNING/ForkPoolWorker-1]  56%|#####6    | 28/50 [00:05<00:04,  5.30it/s]
[2024-10-31 06:04:33,318: WARNING/ForkPoolWorker-1]  58%|#####8    | 29/50 [00:05<00:03,  5.28it/s]
[2024-10-31 06:04:33,507: WARNING/ForkPoolWorker-1]  60%|######    | 30/50 [00:05<00:03,  5.28it/s]
[2024-10-31 06:04:33,698: WARNING/ForkPoolWorker-1]  62%|######2   | 31/50 [00:06<00:03,  5.27it/s]
[2024-10-31 06:04:33,888: WARNING/ForkPoolWorker-1]  64%|######4   | 32/50 [00:06<00:03,  5.27it/s]
[2024-10-31 06:04:34,080: WARNING/ForkPoolWorker-1]  66%|######6   | 33/50 [00:06<00:03,  5.26it/s]
[2024-10-31 06:04:34,268: WARNING/ForkPoolWorker-1]  68%|######8   | 34/50 [00:06<00:03,  5.27it/s]
[2024-10-31 06:04:34,463: WARNING/ForkPoolWorker-1]  70%|#######   | 35/50 [00:06<00:02,  5.23it/s]
[2024-10-31 06:04:34,650: WARNING/ForkPoolWorker-1]  72%|#######2  | 36/50 [00:06<00:02,  5.26it/s]
[2024-10-31 06:04:34,844: WARNING/ForkPoolWorker-1]  74%|#######4  | 37/50 [00:07<00:02,  5.23it/s]
[2024-10-31 06:04:35,034: WARNING/ForkPoolWorker-1]  76%|#######6  | 38/50 [00:07<00:02,  5.24it/s]
[2024-10-31 06:04:35,226: WARNING/ForkPoolWorker-1]  78%|#######8  | 39/50 [00:07<00:02,  5.23it/s]
[2024-10-31 06:04:35,417: WARNING/ForkPoolWorker-1]  80%|########  | 40/50 [00:07<00:01,  5.23it/s]
[2024-10-31 06:04:35,607: WARNING/ForkPoolWorker-1]  82%|########2 | 41/50 [00:07<00:01,  5.24it/s]
[2024-10-31 06:04:35,800: WARNING/ForkPoolWorker-1]  84%|########4 | 42/50 [00:08<00:01,  5.23it/s]
[2024-10-31 06:04:35,988: WARNING/ForkPoolWorker-1]  86%|########6 | 43/50 [00:08<00:01,  5.25it/s]
[2024-10-31 06:04:36,181: WARNING/ForkPoolWorker-1]  88%|########8 | 44/50 [00:08<00:01,  5.23it/s]
[2024-10-31 06:04:36,368: WARNING/ForkPoolWorker-1]  90%|######### | 45/50 [00:08<00:00,  5.26it/s]
[2024-10-31 06:04:36,561: WARNING/ForkPoolWorker-1]  92%|#########2| 46/50 [00:08<00:00,  5.23it/s]
[2024-10-31 06:04:36,753: WARNING/ForkPoolWorker-1]  94%|#########3| 47/50 [00:09<00:00,  5.23it/s]
[2024-10-31 06:04:36,946: WARNING/ForkPoolWorker-1]  96%|#########6| 48/50 [00:09<00:00,  5.22it/s]
[2024-10-31 06:04:37,139: WARNING/ForkPoolWorker-1]  98%|#########8| 49/50 [00:09<00:00,  5.20it/s]
[2024-10-31 06:04:37,328: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.23it/s]
[2024-10-31 06:04:37,328: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.17it/s]
[2024-10-31 06:04:37,548: INFO/ForkPoolWorker-1] Task celery_tasks.celery_replace_anything[a3fbe941-847e-4452-a991-75ff47266546] succeeded in 11.075724003000005s: ('sharkcute_inpainted.jpg', '7e587d6d-88ca-4e50-bc58-93a0eedf2889')
[2024-10-31 06:05:26,809: INFO/MainProcess] Task celery_tasks.load_model[894d4479-ed45-4e4a-bf2f-c2bd3f042235] received
[2024-10-31 06:05:26,811: INFO/ForkPoolWorker-1] Task celery_tasks.load_model[894d4479-ed45-4e4a-bf2f-c2bd3f042235] succeeded in 0.0008993419999114849s: None
[2024-10-31 06:05:36,312: INFO/MainProcess] Task celery_tasks.celery_remove_anything[5f690c50-79ca-4c78-9be9-dec4d0db6d0f] received
[2024-10-31 06:05:37,755: INFO/ForkPoolWorker-1] Task celery_tasks.celery_remove_anything[5f690c50-79ca-4c78-9be9-dec4d0db6d0f] succeeded in 1.442294234999963s: (['sharkcute_inpainted_1.jpg', 'sharkcute_inpainted_2.jpg', 'sharkcute_inpainted_3.jpg'], 'd28a2e36-ba1b-4ed1-9352-8eb3afc00922')
[2024-10-31 06:05:59,368: INFO/MainProcess] Task celery_tasks.celery_replace_anything[ebbf2065-2401-4b0d-a4d9-9e6a62281cfa] received
[2024-10-31 06:06:00,473: WARNING/ForkPoolWorker-1]   0%|          | 0/50 [00:00<?, ?it/s]
[2024-10-31 06:06:00,938: WARNING/ForkPoolWorker-1]   2%|2         | 1/50 [00:00<00:22,  2.15it/s]
[2024-10-31 06:06:01,125: WARNING/ForkPoolWorker-1]   4%|4         | 2/50 [00:00<00:14,  3.32it/s]
[2024-10-31 06:06:01,313: WARNING/ForkPoolWorker-1]   6%|6         | 3/50 [00:00<00:11,  4.01it/s]
[2024-10-31 06:06:01,514: WARNING/ForkPoolWorker-1]   8%|8         | 4/50 [00:01<00:10,  4.34it/s]
[2024-10-31 06:06:01,699: WARNING/ForkPoolWorker-1]  10%|#         | 5/50 [00:01<00:09,  4.67it/s]
[2024-10-31 06:06:01,888: WARNING/ForkPoolWorker-1]  12%|#2        | 6/50 [00:01<00:09,  4.87it/s]
[2024-10-31 06:06:02,077: WARNING/ForkPoolWorker-1]  14%|#4        | 7/50 [00:01<00:08,  5.00it/s]
[2024-10-31 06:06:02,268: WARNING/ForkPoolWorker-1]  16%|#6        | 8/50 [00:01<00:08,  5.08it/s]
[2024-10-31 06:06:02,461: WARNING/ForkPoolWorker-1]  18%|#8        | 9/50 [00:01<00:08,  5.11it/s]
[2024-10-31 06:06:02,652: WARNING/ForkPoolWorker-1]  20%|##        | 10/50 [00:02<00:07,  5.15it/s]
[2024-10-31 06:06:02,840: WARNING/ForkPoolWorker-1]  22%|##2       | 11/50 [00:02<00:07,  5.20it/s]
[2024-10-31 06:06:03,033: WARNING/ForkPoolWorker-1]  24%|##4       | 12/50 [00:02<00:07,  5.19it/s]
[2024-10-31 06:06:03,224: WARNING/ForkPoolWorker-1]  26%|##6       | 13/50 [00:02<00:07,  5.20it/s]
[2024-10-31 06:06:03,423: WARNING/ForkPoolWorker-1]  28%|##8       | 14/50 [00:02<00:06,  5.15it/s]
[2024-10-31 06:06:03,619: WARNING/ForkPoolWorker-1]  30%|###       | 15/50 [00:03<00:06,  5.13it/s]
[2024-10-31 06:06:03,812: WARNING/ForkPoolWorker-1]  32%|###2      | 16/50 [00:03<00:06,  5.15it/s]
[2024-10-31 06:06:04,002: WARNING/ForkPoolWorker-1]  34%|###4      | 17/50 [00:03<00:06,  5.18it/s]
[2024-10-31 06:06:04,199: WARNING/ForkPoolWorker-1]  36%|###6      | 18/50 [00:03<00:06,  5.15it/s]
[2024-10-31 06:06:04,397: WARNING/ForkPoolWorker-1]  38%|###8      | 19/50 [00:03<00:06,  5.12it/s]
[2024-10-31 06:06:04,595: WARNING/ForkPoolWorker-1]  40%|####      | 20/50 [00:04<00:05,  5.10it/s]
[2024-10-31 06:06:04,792: WARNING/ForkPoolWorker-1]  42%|####2     | 21/50 [00:04<00:05,  5.09it/s]
[2024-10-31 06:06:04,986: WARNING/ForkPoolWorker-1]  44%|####4     | 22/50 [00:04<00:05,  5.11it/s]
[2024-10-31 06:06:05,180: WARNING/ForkPoolWorker-1]  46%|####6     | 23/50 [00:04<00:05,  5.12it/s]
[2024-10-31 06:06:05,372: WARNING/ForkPoolWorker-1]  48%|####8     | 24/50 [00:04<00:05,  5.15it/s]
[2024-10-31 06:06:05,564: WARNING/ForkPoolWorker-1]  50%|#####     | 25/50 [00:05<00:04,  5.16it/s]
[2024-10-31 06:06:05,758: WARNING/ForkPoolWorker-1]  52%|#####2    | 26/50 [00:05<00:04,  5.16it/s]
[2024-10-31 06:06:05,953: WARNING/ForkPoolWorker-1]  54%|#####4    | 27/50 [00:05<00:04,  5.15it/s]
[2024-10-31 06:06:06,148: WARNING/ForkPoolWorker-1]  56%|#####6    | 28/50 [00:05<00:04,  5.14it/s]
[2024-10-31 06:06:06,339: WARNING/ForkPoolWorker-1]  58%|#####8    | 29/50 [00:05<00:04,  5.18it/s]
[2024-10-31 06:06:06,533: WARNING/ForkPoolWorker-1]  60%|######    | 30/50 [00:06<00:03,  5.17it/s]
[2024-10-31 06:06:06,730: WARNING/ForkPoolWorker-1]  62%|######2   | 31/50 [00:06<00:03,  5.14it/s]
[2024-10-31 06:06:06,923: WARNING/ForkPoolWorker-1]  64%|######4   | 32/50 [00:06<00:03,  5.16it/s]
[2024-10-31 06:06:07,114: WARNING/ForkPoolWorker-1]  66%|######6   | 33/50 [00:06<00:03,  5.18it/s]
[2024-10-31 06:06:07,312: WARNING/ForkPoolWorker-1]  68%|######8   | 34/50 [00:06<00:03,  5.14it/s]
[2024-10-31 06:06:07,503: WARNING/ForkPoolWorker-1]  70%|#######   | 35/50 [00:07<00:02,  5.17it/s]
[2024-10-31 06:06:07,696: WARNING/ForkPoolWorker-1]  72%|#######2  | 36/50 [00:07<00:02,  5.17it/s]
[2024-10-31 06:06:07,892: WARNING/ForkPoolWorker-1]  74%|#######4  | 37/50 [00:07<00:02,  5.15it/s]
[2024-10-31 06:06:08,082: WARNING/ForkPoolWorker-1]  76%|#######6  | 38/50 [00:07<00:02,  5.18it/s]
[2024-10-31 06:06:08,279: WARNING/ForkPoolWorker-1]  78%|#######8  | 39/50 [00:07<00:02,  5.15it/s]
[2024-10-31 06:06:08,476: WARNING/ForkPoolWorker-1]  80%|########  | 40/50 [00:08<00:01,  5.13it/s]
[2024-10-31 06:06:08,672: WARNING/ForkPoolWorker-1]  82%|########2 | 41/50 [00:08<00:01,  5.12it/s]
[2024-10-31 06:06:08,867: WARNING/ForkPoolWorker-1]  84%|########4 | 42/50 [00:08<00:01,  5.13it/s]
[2024-10-31 06:06:09,061: WARNING/ForkPoolWorker-1]  86%|########6 | 43/50 [00:08<00:01,  5.14it/s]
[2024-10-31 06:06:09,257: WARNING/ForkPoolWorker-1]  88%|########8 | 44/50 [00:08<00:01,  5.12it/s]
[2024-10-31 06:06:09,452: WARNING/ForkPoolWorker-1]  90%|######### | 45/50 [00:08<00:00,  5.12it/s]
[2024-10-31 06:06:09,647: WARNING/ForkPoolWorker-1]  92%|#########2| 46/50 [00:09<00:00,  5.13it/s]
[2024-10-31 06:06:09,840: WARNING/ForkPoolWorker-1]  94%|#########3| 47/50 [00:09<00:00,  5.14it/s]
[2024-10-31 06:06:10,038: WARNING/ForkPoolWorker-1]  96%|#########6| 48/50 [00:09<00:00,  5.12it/s]
[2024-10-31 06:06:10,232: WARNING/ForkPoolWorker-1]  98%|#########8| 49/50 [00:09<00:00,  5.13it/s]
[2024-10-31 06:06:10,429: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.11it/s]
[2024-10-31 06:06:10,429: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.02it/s]
[2024-10-31 06:06:10,646: INFO/ForkPoolWorker-1] Task celery_tasks.celery_replace_anything[ebbf2065-2401-4b0d-a4d9-9e6a62281cfa] succeeded in 11.277154540999845s: ('sharkcute_inpainted.jpg', 'd28a2e36-ba1b-4ed1-9352-8eb3afc00922')
[2024-10-31 06:06:49,144: INFO/MainProcess] Task celery_tasks.celery_remove_anything[370b2e35-a555-4e88-8659-f705be5a4eff] received
[2024-10-31 06:06:50,565: INFO/ForkPoolWorker-1] Task celery_tasks.celery_remove_anything[370b2e35-a555-4e88-8659-f705be5a4eff] succeeded in 1.4197350610002104s: (['sharkcute_inpainted_1.jpg', 'sharkcute_inpainted_2.jpg', 'sharkcute_inpainted_3.jpg'], 'd28a2e36-ba1b-4ed1-9352-8eb3afc00922')
[2024-10-31 06:07:28,695: INFO/MainProcess] Task celery_tasks.celery_replace_anything[d8473c8a-7f8a-4ec6-a2b5-551eebae10a3] received
[2024-10-31 06:07:29,793: WARNING/ForkPoolWorker-1]   0%|          | 0/50 [00:00<?, ?it/s]
[2024-10-31 06:07:30,252: WARNING/ForkPoolWorker-1]   2%|2         | 1/50 [00:00<00:22,  2.18it/s]
[2024-10-31 06:07:30,435: WARNING/ForkPoolWorker-1]   4%|4         | 2/50 [00:00<00:14,  3.37it/s]
[2024-10-31 06:07:30,622: WARNING/ForkPoolWorker-1]   6%|6         | 3/50 [00:00<00:11,  4.06it/s]
[2024-10-31 06:07:30,822: WARNING/ForkPoolWorker-1]   8%|8         | 4/50 [00:01<00:10,  4.38it/s]
[2024-10-31 06:07:31,011: WARNING/ForkPoolWorker-1]  10%|#         | 5/50 [00:01<00:09,  4.67it/s]
[2024-10-31 06:07:31,201: WARNING/ForkPoolWorker-1]  12%|#2        | 6/50 [00:01<00:09,  4.86it/s]
[2024-10-31 06:07:31,391: WARNING/ForkPoolWorker-1]  14%|#4        | 7/50 [00:01<00:08,  4.98it/s]
[2024-10-31 06:07:31,579: WARNING/ForkPoolWorker-1]  16%|#6        | 8/50 [00:01<00:08,  5.08it/s]
[2024-10-31 06:07:31,773: WARNING/ForkPoolWorker-1]  18%|#8        | 9/50 [00:01<00:08,  5.10it/s]
[2024-10-31 06:07:31,967: WARNING/ForkPoolWorker-1]  20%|##        | 10/50 [00:02<00:07,  5.12it/s]
[2024-10-31 06:07:32,161: WARNING/ForkPoolWorker-1]  22%|##2       | 11/50 [00:02<00:07,  5.13it/s]
[2024-10-31 06:07:32,352: WARNING/ForkPoolWorker-1]  24%|##4       | 12/50 [00:02<00:07,  5.17it/s]
[2024-10-31 06:07:32,542: WARNING/ForkPoolWorker-1]  26%|##6       | 13/50 [00:02<00:07,  5.19it/s]
[2024-10-31 06:07:32,737: WARNING/ForkPoolWorker-1]  28%|##8       | 14/50 [00:02<00:06,  5.18it/s]
[2024-10-31 06:07:32,932: WARNING/ForkPoolWorker-1]  30%|###       | 15/50 [00:03<00:06,  5.16it/s]
[2024-10-31 06:07:33,124: WARNING/ForkPoolWorker-1]  32%|###2      | 16/50 [00:03<00:06,  5.18it/s]
[2024-10-31 06:07:33,314: WARNING/ForkPoolWorker-1]  34%|###4      | 17/50 [00:03<00:06,  5.20it/s]
[2024-10-31 06:07:33,506: WARNING/ForkPoolWorker-1]  36%|###6      | 18/50 [00:03<00:06,  5.20it/s]
[2024-10-31 06:07:33,701: WARNING/ForkPoolWorker-1]  38%|###8      | 19/50 [00:03<00:05,  5.18it/s]
[2024-10-31 06:07:33,894: WARNING/ForkPoolWorker-1]  40%|####      | 20/50 [00:04<00:05,  5.18it/s]
[2024-10-31 06:07:34,090: WARNING/ForkPoolWorker-1]  42%|####2     | 21/50 [00:04<00:05,  5.15it/s]
[2024-10-31 06:07:34,282: WARNING/ForkPoolWorker-1]  44%|####4     | 22/50 [00:04<00:05,  5.17it/s]
[2024-10-31 06:07:34,473: WARNING/ForkPoolWorker-1]  46%|####6     | 23/50 [00:04<00:05,  5.19it/s]
[2024-10-31 06:07:34,667: WARNING/ForkPoolWorker-1]  48%|####8     | 24/50 [00:04<00:05,  5.18it/s]
[2024-10-31 06:07:34,863: WARNING/ForkPoolWorker-1]  50%|#####     | 25/50 [00:05<00:04,  5.15it/s]
[2024-10-31 06:07:35,054: WARNING/ForkPoolWorker-1]  52%|#####2    | 26/50 [00:05<00:04,  5.18it/s]
[2024-10-31 06:07:35,246: WARNING/ForkPoolWorker-1]  54%|#####4    | 27/50 [00:05<00:04,  5.19it/s]
[2024-10-31 06:07:35,442: WARNING/ForkPoolWorker-1]  56%|#####6    | 28/50 [00:05<00:04,  5.16it/s]
[2024-10-31 06:07:35,632: WARNING/ForkPoolWorker-1]  58%|#####8    | 29/50 [00:05<00:04,  5.19it/s]
[2024-10-31 06:07:35,829: WARNING/ForkPoolWorker-1]  60%|######    | 30/50 [00:06<00:03,  5.16it/s]
[2024-10-31 06:07:36,023: WARNING/ForkPoolWorker-1]  62%|######2   | 31/50 [00:06<00:03,  5.15it/s]
[2024-10-31 06:07:36,214: WARNING/ForkPoolWorker-1]  64%|######4   | 32/50 [00:06<00:03,  5.18it/s]
[2024-10-31 06:07:36,409: WARNING/ForkPoolWorker-1]  66%|######6   | 33/50 [00:06<00:03,  5.17it/s]
[2024-10-31 06:07:36,602: WARNING/ForkPoolWorker-1]  68%|######8   | 34/50 [00:06<00:03,  5.17it/s]
[2024-10-31 06:07:36,797: WARNING/ForkPoolWorker-1]  70%|#######   | 35/50 [00:07<00:02,  5.16it/s]
[2024-10-31 06:07:36,991: WARNING/ForkPoolWorker-1]  72%|#######2  | 36/50 [00:07<00:02,  5.16it/s]
[2024-10-31 06:07:37,183: WARNING/ForkPoolWorker-1]  74%|#######4  | 37/50 [00:07<00:02,  5.17it/s]
[2024-10-31 06:07:37,375: WARNING/ForkPoolWorker-1]  76%|#######6  | 38/50 [00:07<00:02,  5.18it/s]
[2024-10-31 06:07:37,566: WARNING/ForkPoolWorker-1]  78%|#######8  | 39/50 [00:07<00:02,  5.20it/s]
[2024-10-31 06:07:37,762: WARNING/ForkPoolWorker-1]  80%|########  | 40/50 [00:07<00:01,  5.17it/s]
[2024-10-31 06:07:37,954: WARNING/ForkPoolWorker-1]  82%|########2 | 41/50 [00:08<00:01,  5.18it/s]
[2024-10-31 06:07:38,148: WARNING/ForkPoolWorker-1]  84%|########4 | 42/50 [00:08<00:01,  5.18it/s]
[2024-10-31 06:07:38,345: WARNING/ForkPoolWorker-1]  86%|########6 | 43/50 [00:08<00:01,  5.15it/s]
[2024-10-31 06:07:38,536: WARNING/ForkPoolWorker-1]  88%|########8 | 44/50 [00:08<00:01,  5.17it/s]
[2024-10-31 06:07:38,730: WARNING/ForkPoolWorker-1]  90%|######### | 45/50 [00:08<00:00,  5.16it/s]
[2024-10-31 06:07:38,929: WARNING/ForkPoolWorker-1]  92%|#########2| 46/50 [00:09<00:00,  5.12it/s]
[2024-10-31 06:07:39,122: WARNING/ForkPoolWorker-1]  94%|#########3| 47/50 [00:09<00:00,  5.14it/s]
[2024-10-31 06:07:39,313: WARNING/ForkPoolWorker-1]  96%|#########6| 48/50 [00:09<00:00,  5.17it/s]
[2024-10-31 06:07:39,508: WARNING/ForkPoolWorker-1]  98%|#########8| 49/50 [00:09<00:00,  5.15it/s]
[2024-10-31 06:07:39,704: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.14it/s]
[2024-10-31 06:07:39,704: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.04it/s]
[2024-10-31 06:07:39,920: INFO/ForkPoolWorker-1] Task celery_tasks.celery_replace_anything[d8473c8a-7f8a-4ec6-a2b5-551eebae10a3] succeeded in 11.22419465400003s: ('sharkcute_inpainted.jpg', 'd28a2e36-ba1b-4ed1-9352-8eb3afc00922')
[2024-10-31 06:23:26,953: INFO/MainProcess] Task celery_tasks.celery_remove_anything[cd4b85c7-274c-4ffb-9f74-49f18d4ff906] received
[2024-10-31 06:23:28,195: INFO/ForkPoolWorker-1] Task celery_tasks.celery_remove_anything[cd4b85c7-274c-4ffb-9f74-49f18d4ff906] succeeded in 1.240494428999682s: (['cat_2_inpainted_1.jpg', 'cat_2_inpainted_2.jpg', 'cat_2_inpainted_3.jpg'], 'f6196681-ccaa-4bc9-86a4-f40b401da32d')
[2024-10-31 06:25:24,671: INFO/MainProcess] Task celery_tasks.celery_replace_anything[3313f485-33a7-417b-ae8f-683707ef5133] received
[2024-10-31 06:25:25,785: WARNING/ForkPoolWorker-1]   0%|          | 0/50 [00:00<?, ?it/s]
[2024-10-31 06:25:26,266: WARNING/ForkPoolWorker-1]   2%|2         | 1/50 [00:00<00:23,  2.08it/s]
[2024-10-31 06:25:26,457: WARNING/ForkPoolWorker-1]   4%|4         | 2/50 [00:00<00:14,  3.23it/s]
[2024-10-31 06:25:26,646: WARNING/ForkPoolWorker-1]   6%|6         | 3/50 [00:00<00:11,  3.92it/s]
[2024-10-31 06:25:26,849: WARNING/ForkPoolWorker-1]   8%|8         | 4/50 [00:01<00:10,  4.27it/s]
[2024-10-31 06:25:27,043: WARNING/ForkPoolWorker-1]  10%|#         | 5/50 [00:01<00:09,  4.55it/s]
[2024-10-31 06:25:27,235: WARNING/ForkPoolWorker-1]  12%|#2        | 6/50 [00:01<00:09,  4.76it/s]
[2024-10-31 06:25:27,423: WARNING/ForkPoolWorker-1]  14%|#4        | 7/50 [00:01<00:08,  4.93it/s]
[2024-10-31 06:25:27,616: WARNING/ForkPoolWorker-1]  16%|#6        | 8/50 [00:01<00:08,  5.00it/s]
[2024-10-31 06:25:27,816: WARNING/ForkPoolWorker-1]  18%|#8        | 9/50 [00:02<00:08,  5.00it/s]
[2024-10-31 06:25:28,015: WARNING/ForkPoolWorker-1]  20%|##        | 10/50 [00:02<00:07,  5.01it/s]
[2024-10-31 06:25:28,210: WARNING/ForkPoolWorker-1]  22%|##2       | 11/50 [00:02<00:07,  5.04it/s]
[2024-10-31 06:25:28,401: WARNING/ForkPoolWorker-1]  24%|##4       | 12/50 [00:02<00:07,  5.10it/s]
[2024-10-31 06:25:28,593: WARNING/ForkPoolWorker-1]  26%|##6       | 13/50 [00:02<00:07,  5.13it/s]
[2024-10-31 06:25:28,793: WARNING/ForkPoolWorker-1]  28%|##8       | 14/50 [00:03<00:07,  5.09it/s]
[2024-10-31 06:25:28,986: WARNING/ForkPoolWorker-1]  30%|###       | 15/50 [00:03<00:06,  5.12it/s]
[2024-10-31 06:25:29,183: WARNING/ForkPoolWorker-1]  32%|###2      | 16/50 [00:03<00:06,  5.11it/s]
[2024-10-31 06:25:29,371: WARNING/ForkPoolWorker-1]  34%|###4      | 17/50 [00:03<00:06,  5.17it/s]
[2024-10-31 06:25:29,564: WARNING/ForkPoolWorker-1]  36%|###6      | 18/50 [00:03<00:06,  5.18it/s]
[2024-10-31 06:25:29,763: WARNING/ForkPoolWorker-1]  38%|###8      | 19/50 [00:03<00:06,  5.13it/s]
[2024-10-31 06:25:29,958: WARNING/ForkPoolWorker-1]  40%|####      | 20/50 [00:04<00:05,  5.12it/s]
[2024-10-31 06:25:30,155: WARNING/ForkPoolWorker-1]  42%|####2     | 21/50 [00:04<00:05,  5.11it/s]
[2024-10-31 06:25:30,344: WARNING/ForkPoolWorker-1]  44%|####4     | 22/50 [00:04<00:05,  5.16it/s]
[2024-10-31 06:25:30,541: WARNING/ForkPoolWorker-1]  46%|####6     | 23/50 [00:04<00:05,  5.14it/s]
[2024-10-31 06:25:30,737: WARNING/ForkPoolWorker-1]  48%|####8     | 24/50 [00:04<00:05,  5.13it/s]
[2024-10-31 06:25:30,933: WARNING/ForkPoolWorker-1]  50%|#####     | 25/50 [00:05<00:04,  5.12it/s]
[2024-10-31 06:25:31,126: WARNING/ForkPoolWorker-1]  52%|#####2    | 26/50 [00:05<00:04,  5.14it/s]
[2024-10-31 06:25:31,321: WARNING/ForkPoolWorker-1]  54%|#####4    | 27/50 [00:05<00:04,  5.13it/s]
[2024-10-31 06:25:31,516: WARNING/ForkPoolWorker-1]  56%|#####6    | 28/50 [00:05<00:04,  5.13it/s]
[2024-10-31 06:25:31,713: WARNING/ForkPoolWorker-1]  58%|#####8    | 29/50 [00:05<00:04,  5.12it/s]
[2024-10-31 06:25:31,911: WARNING/ForkPoolWorker-1]  60%|######    | 30/50 [00:06<00:03,  5.10it/s]
[2024-10-31 06:25:32,106: WARNING/ForkPoolWorker-1]  62%|######2   | 31/50 [00:06<00:03,  5.11it/s]
[2024-10-31 06:25:32,303: WARNING/ForkPoolWorker-1]  64%|######4   | 32/50 [00:06<00:03,  5.10it/s]
[2024-10-31 06:25:32,500: WARNING/ForkPoolWorker-1]  66%|######6   | 33/50 [00:06<00:03,  5.09it/s]
[2024-10-31 06:25:32,694: WARNING/ForkPoolWorker-1]  68%|######8   | 34/50 [00:06<00:03,  5.11it/s]
[2024-10-31 06:25:32,888: WARNING/ForkPoolWorker-1]  70%|#######   | 35/50 [00:07<00:02,  5.13it/s]
[2024-10-31 06:25:33,084: WARNING/ForkPoolWorker-1]  72%|#######2  | 36/50 [00:07<00:02,  5.12it/s]
[2024-10-31 06:25:33,282: WARNING/ForkPoolWorker-1]  74%|#######4  | 37/50 [00:07<00:02,  5.09it/s]
[2024-10-31 06:25:33,478: WARNING/ForkPoolWorker-1]  76%|#######6  | 38/50 [00:07<00:02,  5.09it/s]
[2024-10-31 06:25:33,674: WARNING/ForkPoolWorker-1]  78%|#######8  | 39/50 [00:07<00:02,  5.10it/s]
[2024-10-31 06:25:33,871: WARNING/ForkPoolWorker-1]  80%|########  | 40/50 [00:08<00:01,  5.09it/s]
[2024-10-31 06:25:34,066: WARNING/ForkPoolWorker-1]  82%|########2 | 41/50 [00:08<00:01,  5.10it/s]
[2024-10-31 06:25:34,262: WARNING/ForkPoolWorker-1]  84%|########4 | 42/50 [00:08<00:01,  5.10it/s]
[2024-10-31 06:25:34,460: WARNING/ForkPoolWorker-1]  86%|########6 | 43/50 [00:08<00:01,  5.09it/s]
[2024-10-31 06:25:34,657: WARNING/ForkPoolWorker-1]  88%|########8 | 44/50 [00:08<00:01,  5.09it/s]
[2024-10-31 06:25:34,855: WARNING/ForkPoolWorker-1]  90%|######### | 45/50 [00:09<00:00,  5.08it/s]
[2024-10-31 06:25:35,053: WARNING/ForkPoolWorker-1]  92%|#########2| 46/50 [00:09<00:00,  5.07it/s]
[2024-10-31 06:25:35,248: WARNING/ForkPoolWorker-1]  94%|#########3| 47/50 [00:09<00:00,  5.08it/s]
[2024-10-31 06:25:35,442: WARNING/ForkPoolWorker-1]  96%|#########6| 48/50 [00:09<00:00,  5.10it/s]
[2024-10-31 06:25:35,641: WARNING/ForkPoolWorker-1]  98%|#########8| 49/50 [00:09<00:00,  5.08it/s]
[2024-10-31 06:25:35,840: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:10<00:00,  5.06it/s]
[2024-10-31 06:25:35,841: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:10<00:00,  4.97it/s]
[2024-10-31 06:25:36,039: INFO/ForkPoolWorker-1] Task celery_tasks.celery_replace_anything[3313f485-33a7-417b-ae8f-683707ef5133] succeeded in 11.367689115999838s: ('cat_2_inpainted.jpg', 'f6196681-ccaa-4bc9-86a4-f40b401da32d')
[2024-10-31 06:26:07,833: INFO/MainProcess] Task celery_tasks.celery_fill_anything[ec767c22-1ca8-472d-891c-f4fe67aa7a67] received
[2024-10-31 06:26:08,903: WARNING/ForkPoolWorker-1]   0%|          | 0/50 [00:00<?, ?it/s]
[2024-10-31 06:26:09,357: WARNING/ForkPoolWorker-1]   2%|2         | 1/50 [00:00<00:22,  2.20it/s]
[2024-10-31 06:26:09,537: WARNING/ForkPoolWorker-1]   4%|4         | 2/50 [00:00<00:14,  3.41it/s]
[2024-10-31 06:26:09,721: WARNING/ForkPoolWorker-1]   6%|6         | 3/50 [00:00<00:11,  4.12it/s]
[2024-10-31 06:26:09,915: WARNING/ForkPoolWorker-1]   8%|8         | 4/50 [00:01<00:10,  4.47it/s]
[2024-10-31 06:26:10,100: WARNING/ForkPoolWorker-1]  10%|#         | 5/50 [00:01<00:09,  4.77it/s]
[2024-10-31 06:26:10,283: WARNING/ForkPoolWorker-1]  12%|#2        | 6/50 [00:01<00:08,  4.99it/s]
[2024-10-31 06:26:10,466: WARNING/ForkPoolWorker-1]  14%|#4        | 7/50 [00:01<00:08,  5.13it/s]
[2024-10-31 06:26:10,647: WARNING/ForkPoolWorker-1]  16%|#6        | 8/50 [00:01<00:08,  5.25it/s]
[2024-10-31 06:26:10,841: WARNING/ForkPoolWorker-1]  18%|#8        | 9/50 [00:01<00:07,  5.22it/s]
[2024-10-31 06:26:11,028: WARNING/ForkPoolWorker-1]  20%|##        | 10/50 [00:02<00:07,  5.26it/s]
[2024-10-31 06:26:11,215: WARNING/ForkPoolWorker-1]  22%|##2       | 11/50 [00:02<00:07,  5.28it/s]
[2024-10-31 06:26:11,400: WARNING/ForkPoolWorker-1]  24%|##4       | 12/50 [00:02<00:07,  5.32it/s]
[2024-10-31 06:26:11,587: WARNING/ForkPoolWorker-1]  26%|##6       | 13/50 [00:02<00:06,  5.33it/s]
[2024-10-31 06:26:11,775: WARNING/ForkPoolWorker-1]  28%|##8       | 14/50 [00:02<00:06,  5.33it/s]
[2024-10-31 06:26:11,960: WARNING/ForkPoolWorker-1]  30%|###       | 15/50 [00:03<00:06,  5.35it/s]
[2024-10-31 06:26:12,147: WARNING/ForkPoolWorker-1]  32%|###2      | 16/50 [00:03<00:06,  5.35it/s]
[2024-10-31 06:26:12,333: WARNING/ForkPoolWorker-1]  34%|###4      | 17/50 [00:03<00:06,  5.35it/s]
[2024-10-31 06:26:12,519: WARNING/ForkPoolWorker-1]  36%|###6      | 18/50 [00:03<00:05,  5.37it/s]
[2024-10-31 06:26:12,708: WARNING/ForkPoolWorker-1]  38%|###8      | 19/50 [00:03<00:05,  5.34it/s]
[2024-10-31 06:26:12,897: WARNING/ForkPoolWorker-1]  40%|####      | 20/50 [00:03<00:05,  5.33it/s]
[2024-10-31 06:26:13,087: WARNING/ForkPoolWorker-1]  42%|####2     | 21/50 [00:04<00:05,  5.30it/s]
[2024-10-31 06:26:13,276: WARNING/ForkPoolWorker-1]  44%|####4     | 22/50 [00:04<00:05,  5.30it/s]
[2024-10-31 06:26:13,464: WARNING/ForkPoolWorker-1]  46%|####6     | 23/50 [00:04<00:05,  5.31it/s]
[2024-10-31 06:26:13,649: WARNING/ForkPoolWorker-1]  48%|####8     | 24/50 [00:04<00:04,  5.33it/s]
[2024-10-31 06:26:13,836: WARNING/ForkPoolWorker-1]  50%|#####     | 25/50 [00:04<00:04,  5.34it/s]
[2024-10-31 06:26:14,024: WARNING/ForkPoolWorker-1]  52%|#####2    | 26/50 [00:05<00:04,  5.33it/s]
[2024-10-31 06:26:14,210: WARNING/ForkPoolWorker-1]  54%|#####4    | 27/50 [00:05<00:04,  5.35it/s]
[2024-10-31 06:26:14,400: WARNING/ForkPoolWorker-1]  56%|#####6    | 28/50 [00:05<00:04,  5.32it/s]
[2024-10-31 06:26:14,588: WARNING/ForkPoolWorker-1]  58%|#####8    | 29/50 [00:05<00:03,  5.32it/s]
[2024-10-31 06:26:14,776: WARNING/ForkPoolWorker-1]  60%|######    | 30/50 [00:05<00:03,  5.32it/s]
[2024-10-31 06:26:14,963: WARNING/ForkPoolWorker-1]  62%|######2   | 31/50 [00:06<00:03,  5.33it/s]
[2024-10-31 06:26:15,147: WARNING/ForkPoolWorker-1]  64%|######4   | 32/50 [00:06<00:03,  5.36it/s]
[2024-10-31 06:26:15,335: WARNING/ForkPoolWorker-1]  66%|######6   | 33/50 [00:06<00:03,  5.35it/s]
[2024-10-31 06:26:15,524: WARNING/ForkPoolWorker-1]  68%|######8   | 34/50 [00:06<00:03,  5.33it/s]
[2024-10-31 06:26:15,715: WARNING/ForkPoolWorker-1]  70%|#######   | 35/50 [00:06<00:02,  5.30it/s]
[2024-10-31 06:26:15,906: WARNING/ForkPoolWorker-1]  72%|#######2  | 36/50 [00:07<00:02,  5.28it/s]
[2024-10-31 06:26:16,099: WARNING/ForkPoolWorker-1]  74%|#######4  | 37/50 [00:07<00:02,  5.25it/s]
[2024-10-31 06:26:16,287: WARNING/ForkPoolWorker-1]  76%|#######6  | 38/50 [00:07<00:02,  5.27it/s]
[2024-10-31 06:26:16,477: WARNING/ForkPoolWorker-1]  78%|#######8  | 39/50 [00:07<00:02,  5.27it/s]
[2024-10-31 06:26:16,668: WARNING/ForkPoolWorker-1]  80%|########  | 40/50 [00:07<00:01,  5.26it/s]
[2024-10-31 06:26:16,860: WARNING/ForkPoolWorker-1]  82%|########2 | 41/50 [00:07<00:01,  5.24it/s]
[2024-10-31 06:26:17,047: WARNING/ForkPoolWorker-1]  84%|########4 | 42/50 [00:08<00:01,  5.28it/s]
[2024-10-31 06:26:17,240: WARNING/ForkPoolWorker-1]  86%|########6 | 43/50 [00:08<00:01,  5.24it/s]
[2024-10-31 06:26:17,432: WARNING/ForkPoolWorker-1]  88%|########8 | 44/50 [00:08<00:01,  5.24it/s]
[2024-10-31 06:26:17,627: WARNING/ForkPoolWorker-1]  90%|######### | 45/50 [00:08<00:00,  5.20it/s]
[2024-10-31 06:26:17,819: WARNING/ForkPoolWorker-1]  92%|#########2| 46/50 [00:08<00:00,  5.20it/s]
[2024-10-31 06:26:18,007: WARNING/ForkPoolWorker-1]  94%|#########3| 47/50 [00:09<00:00,  5.24it/s]
[2024-10-31 06:26:18,198: WARNING/ForkPoolWorker-1]  96%|#########6| 48/50 [00:09<00:00,  5.23it/s]
[2024-10-31 06:26:18,391: WARNING/ForkPoolWorker-1]  98%|#########8| 49/50 [00:09<00:00,  5.22it/s]
[2024-10-31 06:26:18,585: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.20it/s]
[2024-10-31 06:26:18,586: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.16it/s]
[2024-10-31 06:26:18,781: INFO/ForkPoolWorker-1] Task celery_tasks.celery_fill_anything[ec767c22-1ca8-472d-891c-f4fe67aa7a67] succeeded in 10.947432889000083s: ('cat_2_inpainted.jpg', 'f6196681-ccaa-4bc9-86a4-f40b401da32d')
[2024-10-31 06:27:10,192: INFO/MainProcess] Task celery_tasks.celery_fill_anything[febc93c5-f26b-46cf-b388-507e34e31d04] received
[2024-10-31 06:27:11,293: WARNING/ForkPoolWorker-1]   0%|          | 0/50 [00:00<?, ?it/s]
[2024-10-31 06:27:11,759: WARNING/ForkPoolWorker-1]   2%|2         | 1/50 [00:00<00:22,  2.15it/s]
[2024-10-31 06:27:11,946: WARNING/ForkPoolWorker-1]   4%|4         | 2/50 [00:00<00:14,  3.32it/s]
[2024-10-31 06:27:12,133: WARNING/ForkPoolWorker-1]   6%|6         | 3/50 [00:00<00:11,  4.01it/s]
[2024-10-31 06:27:12,332: WARNING/ForkPoolWorker-1]   8%|8         | 4/50 [00:01<00:10,  4.36it/s]
[2024-10-31 06:27:12,520: WARNING/ForkPoolWorker-1]  10%|#         | 5/50 [00:01<00:09,  4.67it/s]
[2024-10-31 06:27:12,708: WARNING/ForkPoolWorker-1]  12%|#2        | 6/50 [00:01<00:09,  4.87it/s]
[2024-10-31 06:27:12,895: WARNING/ForkPoolWorker-1]  14%|#4        | 7/50 [00:01<00:08,  5.01it/s]
[2024-10-31 06:27:13,080: WARNING/ForkPoolWorker-1]  16%|#6        | 8/50 [00:01<00:08,  5.13it/s]
[2024-10-31 06:27:13,277: WARNING/ForkPoolWorker-1]  18%|#8        | 9/50 [00:01<00:08,  5.11it/s]
[2024-10-31 06:27:13,469: WARNING/ForkPoolWorker-1]  20%|##        | 10/50 [00:02<00:07,  5.14it/s]
[2024-10-31 06:27:13,657: WARNING/ForkPoolWorker-1]  22%|##2       | 11/50 [00:02<00:07,  5.19it/s]
[2024-10-31 06:27:13,847: WARNING/ForkPoolWorker-1]  24%|##4       | 12/50 [00:02<00:07,  5.22it/s]
[2024-10-31 06:27:14,034: WARNING/ForkPoolWorker-1]  26%|##6       | 13/50 [00:02<00:07,  5.25it/s]
[2024-10-31 06:27:14,228: WARNING/ForkPoolWorker-1]  28%|##8       | 14/50 [00:02<00:06,  5.23it/s]
[2024-10-31 06:27:14,421: WARNING/ForkPoolWorker-1]  30%|###       | 15/50 [00:03<00:06,  5.21it/s]
[2024-10-31 06:27:14,609: WARNING/ForkPoolWorker-1]  32%|###2      | 16/50 [00:03<00:06,  5.25it/s]
[2024-10-31 06:27:14,799: WARNING/ForkPoolWorker-1]  34%|###4      | 17/50 [00:03<00:06,  5.25it/s]
[2024-10-31 06:27:14,989: WARNING/ForkPoolWorker-1]  36%|###6      | 18/50 [00:03<00:06,  5.26it/s]
[2024-10-31 06:27:15,181: WARNING/ForkPoolWorker-1]  38%|###8      | 19/50 [00:03<00:05,  5.24it/s]
[2024-10-31 06:27:15,373: WARNING/ForkPoolWorker-1]  40%|####      | 20/50 [00:04<00:05,  5.23it/s]
[2024-10-31 06:27:15,562: WARNING/ForkPoolWorker-1]  42%|####2     | 21/50 [00:04<00:05,  5.25it/s]
[2024-10-31 06:27:15,752: WARNING/ForkPoolWorker-1]  44%|####4     | 22/50 [00:04<00:05,  5.25it/s]
[2024-10-31 06:27:15,945: WARNING/ForkPoolWorker-1]  46%|####6     | 23/50 [00:04<00:05,  5.23it/s]
[2024-10-31 06:27:16,141: WARNING/ForkPoolWorker-1]  48%|####8     | 24/50 [00:04<00:05,  5.19it/s]
[2024-10-31 06:27:16,335: WARNING/ForkPoolWorker-1]  50%|#####     | 25/50 [00:05<00:04,  5.18it/s]
[2024-10-31 06:27:16,529: WARNING/ForkPoolWorker-1]  52%|#####2    | 26/50 [00:05<00:04,  5.17it/s]
[2024-10-31 06:27:16,724: WARNING/ForkPoolWorker-1]  54%|#####4    | 27/50 [00:05<00:04,  5.16it/s]
[2024-10-31 06:27:16,917: WARNING/ForkPoolWorker-1]  56%|#####6    | 28/50 [00:05<00:04,  5.17it/s]
[2024-10-31 06:27:17,111: WARNING/ForkPoolWorker-1]  58%|#####8    | 29/50 [00:05<00:04,  5.17it/s]
[2024-10-31 06:27:17,308: WARNING/ForkPoolWorker-1]  60%|######    | 30/50 [00:06<00:03,  5.14it/s]
[2024-10-31 06:27:17,504: WARNING/ForkPoolWorker-1]  62%|######2   | 31/50 [00:06<00:03,  5.13it/s]
[2024-10-31 06:27:17,700: WARNING/ForkPoolWorker-1]  64%|######4   | 32/50 [00:06<00:03,  5.12it/s]
[2024-10-31 06:27:17,893: WARNING/ForkPoolWorker-1]  66%|######6   | 33/50 [00:06<00:03,  5.14it/s]
[2024-10-31 06:27:18,088: WARNING/ForkPoolWorker-1]  68%|######8   | 34/50 [00:06<00:03,  5.13it/s]
[2024-10-31 06:27:18,284: WARNING/ForkPoolWorker-1]  70%|#######   | 35/50 [00:06<00:02,  5.12it/s]
[2024-10-31 06:27:18,482: WARNING/ForkPoolWorker-1]  72%|#######2  | 36/50 [00:07<00:02,  5.10it/s]
[2024-10-31 06:27:18,676: WARNING/ForkPoolWorker-1]  74%|#######4  | 37/50 [00:07<00:02,  5.12it/s]
[2024-10-31 06:27:18,870: WARNING/ForkPoolWorker-1]  76%|#######6  | 38/50 [00:07<00:02,  5.13it/s]
[2024-10-31 06:27:19,067: WARNING/ForkPoolWorker-1]  78%|#######8  | 39/50 [00:07<00:02,  5.11it/s]
[2024-10-31 06:27:19,262: WARNING/ForkPoolWorker-1]  80%|########  | 40/50 [00:07<00:01,  5.11it/s]
[2024-10-31 06:27:19,459: WARNING/ForkPoolWorker-1]  82%|########2 | 41/50 [00:08<00:01,  5.11it/s]
[2024-10-31 06:27:19,650: WARNING/ForkPoolWorker-1]  84%|########4 | 42/50 [00:08<00:01,  5.14it/s]
[2024-10-31 06:27:19,849: WARNING/ForkPoolWorker-1]  86%|########6 | 43/50 [00:08<00:01,  5.11it/s]
[2024-10-31 06:27:20,047: WARNING/ForkPoolWorker-1]  88%|########8 | 44/50 [00:08<00:01,  5.09it/s]
[2024-10-31 06:27:20,239: WARNING/ForkPoolWorker-1]  90%|######### | 45/50 [00:08<00:00,  5.12it/s]
[2024-10-31 06:27:20,429: WARNING/ForkPoolWorker-1]  92%|#########2| 46/50 [00:09<00:00,  5.16it/s]
[2024-10-31 06:27:20,625: WARNING/ForkPoolWorker-1]  94%|#########3| 47/50 [00:09<00:00,  5.14it/s]
[2024-10-31 06:27:20,820: WARNING/ForkPoolWorker-1]  96%|#########6| 48/50 [00:09<00:00,  5.14it/s]
[2024-10-31 06:27:21,013: WARNING/ForkPoolWorker-1]  98%|#########8| 49/50 [00:09<00:00,  5.15it/s]
[2024-10-31 06:27:21,208: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.15it/s]
[2024-10-31 06:27:21,208: WARNING/ForkPoolWorker-1] 100%|##########| 50/50 [00:09<00:00,  5.04it/s]
[2024-10-31 06:27:21,402: INFO/ForkPoolWorker-1] Task celery_tasks.celery_fill_anything[febc93c5-f26b-46cf-b388-507e34e31d04] succeeded in 11.20918686999994s: ('cat_2_inpainted.jpg', 'f6196681-ccaa-4bc9-86a4-f40b401da32d')
[2024-10-31 06:28:21,907: INFO/MainProcess] Task celery_tasks.celery_remove_anything[9b0708d9-bafa-4c81-ad40-edbd13f1eae9] received
[2024-10-31 06:28:23,168: INFO/ForkPoolWorker-1] Task celery_tasks.celery_remove_anything[9b0708d9-bafa-4c81-ad40-edbd13f1eae9] succeeded in 1.2605825659998118s: (['food_inpainted_1.jpg', 'food_inpainted_2.jpg', 'food_inpainted_3.jpg'], 'a84b3a06-f2dd-4bcf-bce6-b9213a8178cd')
[2024-10-31 06:28:35,447: INFO/MainProcess] Task celery_tasks.celery_remove_anything[8b923134-b3a6-4c79-8c6f-b902f8767cad] received
[2024-10-31 06:28:36,703: INFO/ForkPoolWorker-1] Task celery_tasks.celery_remove_anything[8b923134-b3a6-4c79-8c6f-b902f8767cad] succeeded in 1.255307466999966s: (['food_inpainted_1.jpg', 'food_inpainted_2.jpg', 'food_inpainted_3.jpg'], 'a84b3a06-f2dd-4bcf-bce6-b9213a8178cd')
[2024-10-31 06:28:45,399: INFO/MainProcess] Task celery_tasks.celery_remove_anything[7e506ee2-abea-4628-b373-c126fa03cfa3] received
[2024-10-31 06:28:46,672: INFO/ForkPoolWorker-1] Task celery_tasks.celery_remove_anything[7e506ee2-abea-4628-b373-c126fa03cfa3] succeeded in 1.2722628219999024s: (['food_inpainted_1.jpg', 'food_inpainted_2.jpg', 'food_inpainted_3.jpg'], 'a84b3a06-f2dd-4bcf-bce6-b9213a8178cd')
[2024-10-31 06:28:59,040: INFO/MainProcess] Task celery_tasks.celery_remove_anything[01e2191e-ed44-4960-b4e8-407b66e0351d] received
[2024-10-31 06:29:00,301: INFO/ForkPoolWorker-1] Task celery_tasks.celery_remove_anything[01e2191e-ed44-4960-b4e8-407b66e0351d] succeeded in 1.2603207069996643s: (['food_inpainted_1.jpg', 'food_inpainted_2.jpg', 'food_inpainted_3.jpg'], 'a84b3a06-f2dd-4bcf-bce6-b9213a8178cd')
[2024-10-31 06:29:11,319: INFO/MainProcess] Task celery_tasks.celery_remove_anything[5d09cb5e-6874-43cb-ba03-38492d51c5b9] received
[2024-10-31 06:29:12,584: INFO/ForkPoolWorker-1] Task celery_tasks.celery_remove_anything[5d09cb5e-6874-43cb-ba03-38492d51c5b9] succeeded in 1.2636310539996884s: (['food_inpainted_1.jpg', 'food_inpainted_2.jpg', 'food_inpainted_3.jpg'], 'a84b3a06-f2dd-4bcf-bce6-b9213a8178cd')
[2024-10-31 06:29:42,672: INFO/MainProcess] Task celery_tasks.celery_remove_anything[abd4f5de-c48b-4bf9-b8de-0ca1dc9f3643] received
[2024-10-31 06:29:43,937: INFO/ForkPoolWorker-1] Task celery_tasks.celery_remove_anything[abd4f5de-c48b-4bf9-b8de-0ca1dc9f3643] succeeded in 1.2637480790003792s: (['food_inpainted_1.jpg', 'food_inpainted_2.jpg', 'food_inpainted_3.jpg'], 'a84b3a06-f2dd-4bcf-bce6-b9213a8178cd')
[2024-10-31 06:29:58,365: INFO/MainProcess] Task celery_tasks.celery_remove_anything[42e71513-2ce2-4a7d-905d-0728a63852a4] received
[2024-10-31 06:29:59,634: INFO/ForkPoolWorker-1] Task celery_tasks.celery_remove_anything[42e71513-2ce2-4a7d-905d-0728a63852a4] succeeded in 1.2686704669999926s: (['food_inpainted_1.jpg', 'food_inpainted_2.jpg', 'food_inpainted_3.jpg'], 'a84b3a06-f2dd-4bcf-bce6-b9213a8178cd')
[2024-10-31 06:30:05,822: INFO/MainProcess] Task celery_tasks.celery_remove_anything[c3c31e81-7aa9-43ab-996d-76a82701fef3] received
[2024-10-31 06:30:07,098: INFO/ForkPoolWorker-1] Task celery_tasks.celery_remove_anything[c3c31e81-7aa9-43ab-996d-76a82701fef3] succeeded in 1.2751483900001404s: (['food_inpainted_1.jpg', 'food_inpainted_2.jpg', 'food_inpainted_3.jpg'], 'a84b3a06-f2dd-4bcf-bce6-b9213a8178cd')

Restarting celery worker (/home/truongminhphuong4/venv/bin/celery -A celery_config worker --loglevel=info --concurrency=1)

worker: Warm shutdown (MainProcess)
2024-10-31 06:34:42.011460: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-10-31 06:34:42.016419: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-10-31 06:34:42.027664: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
2024-10-31 06:34:42.046035: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
2024-10-31 06:34:42.051877: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
2024-10-31 06:34:42.065269: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-10-31 06:34:43.080052: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
Detectron v2 is not installed
 
 -------------- celery@dap391-instance v5.4.0 (opalescent)
--- ***** ----- 
-- ******* ---- Linux-6.1.0-26-cloud-amd64-x86_64-with-glibc2.36 2024-10-31 06:34:45
- *** --- * --- 
- ** ---------- [config]
- ** ---------- .> app:         myapp:0x7f6f4de24ed0
- ** ---------- .> transport:   redis://localhost:6379/0
- ** ---------- .> results:     redis://localhost:6379/0
- *** --- * --- .> concurrency: 1 (prefork)
-- ******* ---- .> task events: OFF (enable -E to monitor tasks in this worker)
--- ***** ----- 
 -------------- [queues]
                .> celery           exchange=celery(direct) key=celery
                

[tasks]
  . celery_tasks.celery_fill_anything
  . celery_tasks.celery_remove_anything
  . celery_tasks.celery_replace_anything
  . celery_tasks.load_model

[2024-10-31 06:34:45,649: ERROR/MainProcess] consumer: Cannot connect to redis://localhost:6379/0: Error 111 connecting to localhost:6379. Connection refused..
Trying again in 2.00 seconds... (1/100)

[2024-10-31 06:34:47,651: ERROR/MainProcess] consumer: Cannot connect to redis://localhost:6379/0: Error 111 connecting to localhost:6379. Connection refused..
Trying again in 4.00 seconds... (2/100)

[2024-10-31 06:34:51,653: ERROR/MainProcess] consumer: Cannot connect to redis://localhost:6379/0: Error 111 connecting to localhost:6379. Connection refused..
Trying again in 6.00 seconds... (3/100)

[2024-10-31 06:34:57,655: ERROR/MainProcess] consumer: Cannot connect to redis://localhost:6379/0: Error 111 connecting to localhost:6379. Connection refused..
Trying again in 8.00 seconds... (4/100)

[2024-10-31 06:35:05,658: ERROR/MainProcess] consumer: Cannot connect to redis://localhost:6379/0: Error 111 connecting to localhost:6379. Connection refused..
Trying again in 10.00 seconds... (5/100)

[2024-10-31 06:35:15,660: ERROR/MainProcess] consumer: Cannot connect to redis://localhost:6379/0: Error 111 connecting to localhost:6379. Connection refused..
Trying again in 12.00 seconds... (6/100)

[2024-10-31 06:35:27,664: ERROR/MainProcess] consumer: Cannot connect to redis://localhost:6379/0: Error 111 connecting to localhost:6379. Connection refused..
Trying again in 14.00 seconds... (7/100)

[2024-10-31 06:35:41,667: ERROR/MainProcess] consumer: Cannot connect to redis://localhost:6379/0: Error 111 connecting to localhost:6379. Connection refused..
Trying again in 16.00 seconds... (8/100)

[2024-10-31 06:35:57,671: ERROR/MainProcess] consumer: Cannot connect to redis://localhost:6379/0: Error 111 connecting to localhost:6379. Connection refused..
Trying again in 18.00 seconds... (9/100)

